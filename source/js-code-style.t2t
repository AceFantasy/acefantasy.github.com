JS代码风格
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/js-code-style.html
%%toc


#最重要的几点#

原则：一致，默认，适用。

- 一致：大家认同。不再维护的项目不改。
- 默认：以环境默认配置为优先，少折腾。
- 适用：尊重个人之前的项目，个人其它项目，因为环境都是一套。



- 编码： **UTF-8**
- 换行： Linux 风格的 **\n** (LF)



#要求#

- 编码： **UTF-8**
- 换行： Linux 风格的 **\n** (LF)
- 缩进 4 个空格。（ HTML 缩进 2 个空格， CSS / LESS / SASS 缩进 4 个空格）
- 驼峰命名。（ ``XMLHttpRequest`` -> ``XmlHttpRequest`` ，不要纠结）
- 键名不得使用关键词（比如 ``default`` , ``class`` ）。
- 使用 ``===`` / ``!==`` ，不用 ``==`` / ``!=`` 。
- 单行长度，原则上为 120 个字符。
- “函数声明”只能单独使用，不能在语句中使用（比如 ``if`` 后来个 ``function abc(){}`` ）。
- 总是使用大括号，哪怕在 ``if`` 后只有一行语句。
- 注释中使用 *TODO* 和 *FIXME* 。
- 当一行语句排到多行时，操作符放前面。
- 列表，对象，最后一个成员，末尾不要逗号。
- 使用 ``parseInt`` 时总是带上基数。
- 使用 ``!!some`` 的方式得到布尔类型。
- 相关方法的命名： ``isVal()`` / ``hasVal()`` ， ``getVal()`` / ``setVal()`` 。
- *jQuery* 对象的变量名使用 ``$`` 前缀。
- ``script`` 标签一定是完整关闭而不是自关闭，一定写清楚 ``type`` 属性及 ``charset`` 属性， ``<script type="text/javascript" charset="utf-8" ...>...</script>`` 。



例子：

- 键名不得使用关键词（比如 ``default`` , ``class`` ）。


```javascript
{
    default: '123',
    class: 'first'
}

------------->

{
    origin: '123',
    type: 'first'
}
```


- “函数声明”只能单独使用，不能在语句中使用（比如 ``if`` 后来个 ``function abc(){}`` ）。


```javascript
if (true) {
    function abc() { return 'ok'}
}

------------->

if (true) {
    var abc = function(){ return 'ok' }
}
```


- 总是使用大括号，哪怕在 ``if`` 后只有一行语句。


```javascript
if (foo > 1) console.log('haha')

------------->

if (foo > 1) { console.log('haha') }
```


- 当一行语句排到多行时，操作符放前面。


```javascript
$('#items').
    find('.selected').
    highlight();

------------->

$('#items')
    .find('.selected')
    .highlight();
```


- 列表，对象，最后一个成员，末尾不要逗号。


```javascript
{
    first: 123,
    other: 456,
}

------------->

{
    first: 123,
    other: 456
}
```


- *jQuery* 对象的变量名使用 ``$`` 前缀。


```javascript
var d = $('.abc');

------------->

var $d = $('.abc');
```




#环境配置#


##GIT##

git 需要配置提交 / 抽取代码时对换行符的处理。

```bash
git config --global core.autocrlf input
```

或者在具体的项目下，编辑 git 的配置文件 ``.git/config`` ，添加：

```gitconfig
[core]
    ...
    autocrlf = input
    ...
```


##IDEA 编辑器##

##Sublime Text 2 编辑器##






#IDEA(WebStorm)默认配置#

##缩进##

```javascript
foo(
    "demo",
    {
        title: "Demo",
        width: 100
    },
    function () {
        object.firstCall()
            .secondCall();
    }
);
```

##空格##

```javascript
function foo(x, y, z) {
    bar(1, b);
    var i = 0;
    var x = {0: "zero", 1: "one"};
    var a = [0, 1, 2];
    var foo = function () {
    }
    if (!i > 10) {
        for (var j = 0; j < 10; j++) {
            switch (j) {
                case 0:
                    value = "zero";
                    break;
                case 1:
                    value = "one";
                    break;
            }
            var c = j > 5 ? "GT 5" : "LE 5";
        }
    } else {
        var j = 0;
        try {
            while (j < 10) {
                if (i == j || j > 5) {
                    a[j] = i + j * 12;
                }
                i = (j << 2) & 4;
                j++;
            }
            do {
                j--;
            } while (j > 0)
        } catch (e) {
            alert("Failure: " + e.message);
        } finally {
            reset(a, i);
        }
    }
}
```

##折行和括号##

```javascript
function buzz() {
    return 0;
}

var foo = {
    numbers: ['one', 'two', 'three', 'four', 'five', 'six'],
    data: {
        a: {
            id: 123,
            type: "String",
            isAvailable: true
        },
        b: {id: 456, type: "Int"}
    },
// fBar : function (x,y);
    fOne: function (a, b, c, d, e, f, g, h) {
        var x = a + b + c + d + e + f + g + h;
        fTwo(a, b, c, fThree(d, e, f, g, h));
        var z = a == 'Some string' ? 'yes' : 'no';
        z = a == 10 ? 'yes' : 'no';
        var colors = ['red', 'green', 'blue', 'black', 'white', 'gray'];
        for (j = 0; j < 2; j++) i = a;
        for (var i = 0; i < colors.length; i++)
             var colorString = this.numbers[i];
    },

    chainedCallSample: function (a, b, c, d, e, f) {
        chainRoot.firstCall(a, b, c, d, e, f, g).secondCall(a, b, c, d).thirdCall(a, b, c, d).fourthCall().q(a).r(a, b).s();
        chainRoot.x().y()
            .z();
    },

    /**
     * Function JSDoc. Long lines can be wrapped with 'Comments'/'Wrap at right margin' option
     * @param {string} a Parameter A description.
     * @param {string} b Parameter B description. Can extend beyond the right margin.
     */
    fTwo: function (a, b, c, d) {
        foo(a, b, c, d); // Line comment which can be wrapped if long.
        if (true)
            return c;
        if (a == 'one' && (b == 'two' || c == 'three')) {
            return a + b + c + d;
        } else return strD;
        if (a == 'one') {
            return 1;
        }
        else if (a == 'two') {
            return 2;
        }
        var number = -10;
        while (x < 0) {
            number = number + 1;
        }
        do {
            number = number + 1;
        } while (number < 10);
        return d;
    },

    fThree: function (strA, strB, strC, strD, strE) {
        var number = prompt("Enter a number:", 0);
        switch (number) {
            case 0 :
                alert("Zero");
                break;
            case 1:
                alert("One");
                break;
        }
        try {
            a[2] = 10;
        }
        catch (e) {
            alert("Failure: " + e.message);
        }
        return strA + strB + strC + strD + strE;
    }
};
```

##其它##

```javascript
/*
 Multiline
 C-style
 Comment
 */
var myLink = {
        img: "btn.gif",
        text: "Button",
        width: 128
    },
    local = true,
    initial = -1;
var selector = "#id";

var color = "red";
var offset = 10;

var Name = val;
```




#别人的规范#

Google: http://google.github.io/styleguide/javascriptguide.xml
Google(HTML): http://google.github.io/styleguide/htmlcssguide.xml

Airbnb: https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md

Douglas Crockford: http://javascript.crockford.com/code.html

Dojo:  https://dojotoolkit.org/reference-guide/1.9/developer/styleguide.html

jQuery: https://contribute.jquery.org/style-guide/js/

WordPress: https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/



#Google#


使用大写表示“常量”。


```javascript
NAMES_LIKE_THIS
```

总是使用分号。但是区分函数声明和函数表达式。


```javascript
var foo = function() {
  return true;
};  // semicolon here.


function foo() {
  return true;
}  // no semicolon here.
```

禁止块中使用函数声明，虽然实现支持，但是 ECMA 标准并不支持。函数声明只用在 root 空间或者一个函数的顶级空间。

```javascript
if (x) {
  function foo() {}
}

if (x) {
  var foo = function() {};
}
```

优先使用标准方式，比如字符串取索引：

```javascript
string.charAt(3) //V
string[3]  //X
```

删除 ``delete`` 的使用。除非是真的要删除一个对象的属性，否则直接赋值为 ``null`` 。 ``delete`` 慢。

```javascript
//V
Foo.prototype.dispose = function() {
  this.property_ = null;
};

//X
Foo.prototype.dispose = function() {
  delete this.property_;
};
```

闭包，小心保持引用而造成的资源无法回收问题，特别是操作节点时。

```javascript
//X
function foo(element, a, b) {
  element.onclick = function() { /* uses a and b */ };
}

//V
function foo(element, a, b) {
  element.onclick = bar(a, b);
}

function bar(a, b) {
  return function() { /* uses a and b */ };
}
```

``with`` 禁用。

``this`` 限用（只在构造函数及对象的方法中使用）。

``for in`` 遍历，只用于 ``object`` ，禁止用于 ``Array`` 。

``Array`` 中禁止使用非数字索引。

禁用字符串的多行语法，使用运行符：

```javascript
//X
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';


//V
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
```

``Array`` 和 ``Object`` 直接使用语法创建，禁止使用构造函数。

```javascript
//X
var a1 = new Array(x1, x2, x3);
var o = new Object();

//V
var a = [x1, x2, x3];
var o = {};
```

禁止动内置对象的原型。

禁止使用 IE 的条件注释。

```javascript
var f = function () {
    /*@cc_on if (@_jscript) { return 2* @*/  3; /*@ } @*/
};
```

优先使用单引号。

使用 *JSDoc* 风格的注释。

面向用户的代码必须被编译。


命名方式：

```javascript
functionNamesLikeThis
variableNamesLikeThis
ClassNamesLikeThis
EnumNamesLikeThis
methodNamesLikeThis
CONSTANT_VALUES_LIKE_THIS
foo.namespaceNamesLikeThis.bar
filenameslikethis.js
```


代码格式（参照 C++）：

```javascript
if (something) {
  // ...
} else {
  // ...
}

//----------------

var arr = [1, 2, 3];  // No space after [ or before ].
var obj = {a: 1, b: 2, c: 3};  // No space after { or before }.

//----------------

//2 spaces
// Object initializer.
var inset = {
  top: 10,
  right: 20,
  bottom: 15,
  left: 12
};

// Array initializer.
this.rows_ = [
  '"Slartibartfast" <fjordmaster@magrathea.com>',
  '"Zaphod Beeblebrox" <theprez@universe.gov>',
  '"Ford Prefect" <ford@theguide.com>',
  '"Arthur Dent" <has.no.tea@gmail.com>',
  '"Marvin the Paranoid Android" <marv@googlemail.com>',
  'the.mice@magrathea.com'
];

// Used in a method call.
goog.dom.createDom(goog.dom.TagName.DIV, {
  id: 'foo',
  className: 'some-css-class',
  style: 'display:none'
}, 'Hello, world!');


//----------------

// Four-space, wrap at 80.  Works with very long function names, survives
// renaming without reindenting, low on space.
goog.foo.bar.doThingThatIsVeryDifficultToExplain = function(
    veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,
    tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {
  // ...
};

// Four-space, one argument per line.  Works with long function names,
// survives renaming, and emphasizes each argument.
goog.foo.bar.doThingThatIsVeryDifficultToExplain = function(
    veryDescriptiveArgumentNumberOne,
    veryDescriptiveArgumentTwo,
    tableModelEventHandlerProxy,
    artichokeDescriptorAdapterIterator) {
  // ...
};

// Parenthesis-aligned indentation, wrap at 80.  Visually groups arguments,
// low on space.
function foo(veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,
             tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {
  // ...
}

// Parenthesis-aligned, one argument per line.  Emphasizes each
// individual argument.
function bar(veryDescriptiveArgumentNumberOne,
             veryDescriptiveArgumentTwo,
             tableModelEventHandlerProxy,
             artichokeDescriptorAdapterIterator) {
  // ...
}


//----------------
// Anonymous Functions

prefix.something.reallyLongFunctionName('whatever', function(a1, a2) {
  if (a1.equals(a2)) {
    someOtherLongFunctionName(a1);
  } else {
    andNowForSomethingCompletelyDifferent(a2.parrot);
  }
});

var names = prefix.something.myExcellentMapFunction(
    verboselyNamedCollectionOfItems,
    function(item) {
      return item.name;
    });


//----------------

var x = a ? b : c;  // All on one line if it will fit.

// Indentation +4 is OK.
var y = a ?
    longButSimpleOperandB : longButSimpleOperandC;

// Indenting to the line position of the first operand is also OK.
var z = a ?
        moreComplicatedB :
        moreComplicatedC;
```


小心坑：

```text
//false
null
undefined
'' the empty string
0 the number


//true
'0' the string
[] the empty array
{} the empty object
```


最重要的一点： **保持一致** ，你可以不鸟上面这些东西 。



#Airbnb#


不要使用关键字作为键名。

```javascript
// bad
var superman = {
  default: { clark: 'kent' },
  private: true
};

// good
var superman = {
  defaults: { clark: 'kent' },
  hidden: true
};


// bad
var superman = {
  class: 'alien'
};

// bad
var superman = {
  klass: 'alien'
};

// good
var superman = {
  type: 'alien'
};
```

使用 ``slice`` 复制数组。

```javascript
var len = items.length;
var itemsCopy = [];
var i;

// bad
for (i = 0; i < len; i++) {
  itemsCopy[i] = items[i];
}

// good
itemsCopy = items.slice();
```


使用 ``Array.prototype.slice`` 转换类数组对象。

```javascript
function trigger() {
  var args = Array.prototype.slice.call(arguments);
  ...
}
```


字符串使用单引号，单行 80 字。

```javascript
// bad
var errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';

// bad
var errorMessage = 'This is a super long error that was thrown because \
of Batman. When you stop to think about how Batman had anything to do \
with this, you would get nowhere \
fast.';

// good
var errorMessage = 'This is a super long error that was thrown because ' +
  'of Batman. When you stop to think about how Batman had anything to do ' +
  'with this, you would get nowhere fast.';
```


使用 ``join`` 连接字符串。


函数声明不是语句，http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97 所以：

```javascript
// bad
if (currentUser) {
  function test() {
    console.log('Nope.');
  }
}

// good
var test;
if (currentUser) {
  test = function test() {
    console.log('Yup.');
  };
}
```


永远不要把参数命名为 arguments。这将取代函数作用域内的 arguments 对象。


除非必须，通过 ``.`` 来访问属性。

```javascript
var luke = {
  jedi: true,
  age: 28
};

// bad
var isJedi = luke['jedi'];

// good
var isJedi = luke.jedi;
```


使用 var 声明每一个变量。

```javascript
// bad
var items = getItems(),
    goSportsTeam = true,
    dragonball = 'z';

// bad
// （跟上面的代码比较一下，看看哪里错了）
var items = getItems(),
    goSportsTeam = true;
    dragonball = 'z';

// good
var items = getItems();
var goSportsTeam = true;
var dragonball = 'z';
```


最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。

```javascript
// bad
var i, len, dragonball,
    items = getItems(),
    goSportsTeam = true;

// bad
var i;
var items = getItems();
var dragonball;
var goSportsTeam = true;
var len;

// good
var items = getItems();
var goSportsTeam = true;
var dragonball;
var length;
var i;
```


变量声明会提升至作用域顶部，但赋值不会。

```javascript
// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）
function example() {
  console.log(notDefined); // => throws a ReferenceError
}

// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。
// 注：变量赋值为 `true` 不会提升。
function example() {
  console.log(declaredButNotAssigned); // => undefined
  var declaredButNotAssigned = true;
}

// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：
function example() {
  var declaredButNotAssigned;
  console.log(declaredButNotAssigned); // => undefined
  declaredButNotAssigned = true;
}
```


函数声明提升它们的名字和函数体。

```javascript
function example() {
  superPower(); // => Flying

  function superPower() {
    console.log('Flying');
  }
}
```

优先使用 ``===`` 和 ``!==`` 而不是 ``==`` 和 ``!=`` .


一些逻辑比较：

```javascript
// bad
if (name !== '') {
  // ...stuff...
}

// good
if (name) {
  // ...stuff...
}

// bad
if (collection.length > 0) {
  // ...stuff...
}

// good
if (collection.length) {
  // ...stuff...
}
```

使用大括号包裹所有的多行代码块。

```javascript
// bad
if (test)
  return false;

// good
if (test) return false;

// good
if (test) {
  return false;
}

// bad
function() { return false; }

// good
function() {
  return false;
}
```

如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块关闭括号的同一行。

```javascript
// bad
if (test) {
  thing1();
  thing2();
}
else {
  thing3();
}

// good
if (test) {
  thing1();
  thing2();
} else {
  thing3();
}
```


在注释中使用 *TODO* 和 *FIXME* 。


在大括号前放一个空格。

```javascript
// bad
function test(){
  console.log('test');
}

// good
function test() {
  console.log('test');
}

// bad
dog.set('attr',{
  age: '1 year',
  breed: 'Bernese Mountain Dog'
});

// good
dog.set('attr', {
  age: '1 year',
  breed: 'Bernese Mountain Dog'
});
```


在控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。

```javascript
// bad
if(isJedi) {
  fight ();
}

// good
if (isJedi) {
  fight();
}

// bad
function fight () {
  console.log ('Swooosh!');
}

// good
function fight() {
  console.log('Swooosh!');
}
```

在文件末尾插入一个空行。

在使用长方法链时进行缩进。使用前面的点 . 强调这是方法调用而不是新语句。

```javascript
// bad
$('#items').find('.selected').highlight().end().find('.open').updateCount();

// bad
$('#items').
  find('.selected').
    highlight().
    end().
  find('.open').
    updateCount();

// good
$('#items')
  .find('.selected')
    .highlight()
    .end()
  .find('.open')
    .updateCount();
```


行首逗号: 不需要。

```javascript
// bad
var story = [
    once
  , upon
  , aTime
];

// good
var story = [
  once,
  upon,
  aTime
];
```


额外的行末逗号：不需要。

```javascript
//bad
var heroes = [
  'Batman',
  'Superman',
];

// good
var hero = {
  firstName: 'Kevin',
  lastName: 'Flynn'
};
```


```javascript
// bad
(function() {
  var name = 'Skywalker'
  return name
})()

// good
(function() {
  var name = 'Skywalker';
  return name;
})();

// good (防止函数在两个 IIFE 合并时被当成一个参数
;(function() {
  var name = 'Skywalker';
  return name;
})();
```


使用 parseInt 转换数字时总是带上类型转换的基数。

```javascript
// bad
var val = parseInt(inputValue);

// good
var val = parseInt(inputValue, 10);
```

布尔:

```javascript
// good
var hasAge = !!age;
```


使用驼峰式命名对象、函数和实例。

```javascript
// bad
var OBJEcttsssss = {};
var this_is_my_object = {};
var o = {};
function c() {}

// good
var thisIsMyObject = {};
function thisIsMyFunction() {}
```

使用 _this 保存 this 的引用。

给函数命名。这在做堆栈轨迹时很有帮助。

```javascript
// bad
var log = function(msg) {
  console.log(msg);
};

// good
var log = function log(msg) {
  console.log(msg);
};
```

如果你需要存取函数时使用 getVal() 和 setVal('hello')。

```javascript
// bad
dragon.age();

// good
dragon.getAge();

// bad
dragon.age(25);

// good
dragon.setAge(25);
```


如果属性是布尔值，使用 isVal() 或 hasVal()。

```javascript
// bad
if (!dragon.age()) {
  return false;
}

// good
if (!dragon.hasAge()) {
  return false;
}
```


当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：

```javascript
// bad
$(this).trigger('listingUpdated', listing.id);

...

$(this).on('listingUpdated', function(e, listingId) {
  // do something with listingId
});


// good
$(this).trigger('listingUpdated', { listingId : listing.id });

...

$(this).on('listingUpdated', function(e, data) {
  // do something with data.listingId
});
```


使用 $ 作为存储 jQuery 对象的变量名前缀。

```javascript
// bad
var sidebar = $('.sidebar');

// good
var $sidebar = $('.sidebar');
```


使用下划线标识私有成员。


#Douglas Crockford#

<script src=filename.js> tags should be placed as late in the body as possible. This reduces the effects of delays imposed by script loading on other page components. There is no need to use the language or type attributes. It is the server, not the script tag, that determines the MIME type.   ( *charset* ?)


Avoid lines longer than 80 characters. When a statement will not fit on a single line, it may be necessary to break it. Place the break after an operator, ideally after a comma. A break after an operator decreases the likelihood that a copy-paste error will be masked by semicolon insertion. The next line should be indented 8 spaces.


All variables should be declared before used. JavaScript does not require this, but doing so makes the program easier to read and makes it easier to detect undeclared variables that may become implied globals. Implied global variables should never be used. Use of global variables should be minimized.


 , (comma) Operator

Avoid the use of the comma operator. (This does not apply to the comma separator, which is used in object literals, array literals, var statements, and parameter lists.)



#jQuery#

实在不认同，不看了。








