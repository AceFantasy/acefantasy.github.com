SVG 学习
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/
%!format: !email
%%toc


# 简单认识 #

## 基本的样式 ##

SVG 是浏览器可支持的，应用广泛的失量图标准方案，它使用 *XML* 来描述失量信息，一个最简单的 ``demo.svg`` 如下：

'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="140" height="170" xmlns="http://www.w3.org/2000/svg">
<title>Demo</title>
<desc>Hello World</desc>
<circle cx="70" cy="95" r="50" style="stroke: black; fill: red;" />
</svg>
'''

```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="140" height="170" xmlns="http://www.w3.org/2000/svg">
<title>Demo</title>
<desc>Hello World</desc>
<circle cx="70" cy="95" r="50" style="stroke: black; fill: red;" />
</svg>
```


这里面：

- ``<?xml version="1.0"?>`` 是 XML 文件的头。
- ``<!DOCTYPE ...>`` 是文件类型描述，跟 HTML5 文件类似。只是这里是完整的，还指明了 *DTD* 。
- ``<svg width="140" height="170" xmlns="...">`` 是 SVG 的根节点，需要标注宽，高，及名字空间（对于 *名字空间* 可以这样来简单理解， SVG 和 HTML 它们的“合法标签”是不同的，如果在 HTML 中使用了 SVG ，当浏览器看到一个 ``title`` 标签时，它怎么知道这是 HTML 的 ``title`` ，还是 SVG 的 ``title`` 呢？这就需要使用 *名字空间* 来确切地标识了）。
- ``<title>`` 和 ``<desc>`` 是 SVG 中的标签， ``<desc>`` 的内容不会在浏览器显示出来的。
- ``<circle>`` 是一个预定义的图形标签，它可以画出一个圆。 


``<circle>`` 中的 ``style`` 属性，类似 HTML 中的 CSS ，甚至如果你在 HTML 中使用 SVG 的话，都可以按 HTML 中的 CSS 的处理方式，使用相同的选择器规则，来定义 SVG 中的指定元素的样式。但是注意，SVG 支持的样式，与 HTML 的 CSS 样式，并不是完全一致的。比如这里的 ``stroke`` 是“描边样式”， ``fill`` 是“填充样式”，类比于 CSS 中的 ``border`` 和 ``background-color`` 吧。所以搞清楚了，形式或者 ``style`` 这个属性名碰巧一样，不代表里面的具体的样式名也跟 HTML 的 CSS 一样。



## 复杂一点的例子 ##

再来看一个，复杂点的包括了更多机制的例子：

'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="180" height="180"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Demo</title>
<desc>Hello World</desc>

<!-- face -->
<circle cx="90" cy="90" r="50" style="stroke: black; fill: none;" />

<!-- eyes -->
<circle cx="70" cy="80" r="5" style="stroke: black; fill: #339933;" />
<circle cx="110" cy="80" r="5" style="stroke: black; fill: #339933;" />

<!-- nose -->
<path d="M 95 95 L 85 95 A 5 10 0  0 0 95 95 " style="stroke: black; fill: #ffcccc;" />

<!-- mouth -->
<polyline points="60 110, 70 120, 110 120, 120 110" style="stroke: black; fill: none;" />

<!-- whiskers -->
<g id="whiskers">
    <line x1="30" y1="90" x2="70" y2="100" style="stroke: black;" />
    <line x1="30" y1="110" x2="70" y2="100" style="stroke: black;" />
</g>
<use xlink:href="#whiskers" transform="scale(-1 1) translate(-180 0)" />
<text x="0" y="25" style="stroke: none; fill: red; font-size: 16px;">随便画的</text>

</svg>
'''

```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="180" height="180"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Demo</title>
<desc>Hello World</desc>

<!-- face -->
<circle cx="90" cy="90" r="50" style="stroke: black; fill: none;" />

<!-- eyes -->
<circle cx="70" cy="80" r="5" style="stroke: black; fill: #339933;" />
<circle cx="110" cy="80" r="5" style="stroke: black; fill: #339933;" />

<!-- nose -->
<path d="M 95 95 L 85 95 A 5 10 0  0 0 95 95 " style="stroke: black; fill: #ffcccc;" />

<!-- mouth -->
<polyline points="60 110, 70 120, 110 120, 120 110" style="stroke: black; fill: none;" />

<!-- whiskers -->
<g id="whiskers">
    <line x1="30" y1="90" x2="70" y2="100" style="stroke: black;" />
    <line x1="30" y1="110" x2="70" y2="100" style="stroke: black;" />
</g>
<use xlink:href="#whiskers" transform="scale(-1 1) translate(-180 0)" />
<text x="0" y="25" style="stroke: none; fill: red; font-size: 16px;">随便画的</text>

</svg>
```


- 这个图整个过程，我都是在手动在计算坐标位置的。图先，就从在中心带一个圆开始。 ``cx / cy`` 定圆心，所以在 ``180x180`` 的画布中，中心当然是一半的 ``(90,90)`` 了。
- 眼睛部分也是圆，所以，我也先是在中心画一个圆，然后复制一个。把第一个往上往左调，另一个往上往右调。
- 鼻子是使用 *路径* 画的， ``d`` 属性中的数据，是 *路径* 专门的表达式，后面细讲。（这里的 ``M 95 95 L 85 95 A ...`` 意思是先移动到 ``(95,95)`` 然后画线到 ``(85,95)`` 再曲线到 ``(95,95)`` 封闭）
- 嘴使用 *多边形* ， ``points`` 属性即是多边形的点，连起来封闭就是了。
- 胡子复杂一些，还是使用两个 ``line`` 画了左边的胡子，然后使用 ``<g>`` 把它包起来，并给了一个 ``id`` 。之后，再引用（复制）这个 ``id`` 的内容，然后进行坐标变换。 ``scale(-1 1)`` 即是水平翻转（注意，参照线是 ``x=0`` 那根纵轴），翻了之后的右边胡子的位置就跑到 ``(-30,90)`` 那边去了（图上看不到了），然后再用 ``transform(-180 0)`` 把它往右挪到正确的位置（因为之前已经 ``scale(-1 1)`` 了，所以这里的 ``-180`` 实际上就是原始状态的 ``180`` ）。
- 最后的 ``<text>`` 是放置文本，这里注意，默认情况下，文本的“定位点”在块的左下角。


从这个例子可以看出：

- 圆，矩形，线，多边形等基本图形，及文本来处理“现成”的元素。
- 路径处理非规则场景。
- ``<g>`` 作编组，用以引用，或隔离坐标系。
- 坐标系各种变换来灵活控制整个系统的构建。


SVG 绘制部分的内容，大概重点就是这些吧。


## 在 HTML 中使用 SVG ##

在 HTML 中使用 SVG 的方式有多种。

首先，可以把 SVG 文件就看成是一个图片，可以用图片的地方（ ``img`` ``background-image``）都可以直接用 SVG 图片的地址，但是使用时，一定记得指定宽度（或宽高，可以破坏比例）。虽说 SVG 本身有“默认”尺寸，但是考虑到它是矢量图，所以实际展示出来的尺寸才是有意义的。

``background-size`` 可以指定背景图大小。

``img`` 或 ``background-image`` 显示出 SVG 图时，你可以理解成浏览器已经把它转成位图了。


另外，可以使用 ``<object>`` 来引用 SVG ， ``type`` 设置为 ``image/svg+xml`` ：

```html
<object data="./demo.svg" type="image/svg+xml" title="hello" alt="svg" />
```

这种方式引入的 SVG ，浏览器会按原始的 XML 标签渲染（不是位图，文本都还可以被选中），并且 SVG 还能与父级的 HTML 上下文通信（后面细讲）。


当然，直接在 HTML 中写 SVG 也是被支持的， ``svg`` 标签写清楚名字空间就可以了，同时 CSS 还可以共同作用。


```html
<!DOCTYPE html>
<html lang="zh-cmn-Hans">
<head>
<meta charset="utf-8" />
<title>SVG</title>
<style type="text/css">
  svg { width: 100px; height: 100px; }
</style>
</head>
<body>
<svg width="180" height="180"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Demo</title>
<desc>Hello World</desc>

<!-- face -->
<circle cx="90" cy="90" r="50" style="stroke: black; fill: none;" />

<!-- eyes -->
<circle cx="70" cy="80" r="5" style="stroke: black; fill: #339933;" />
<circle cx="110" cy="80" r="5" style="stroke: black; fill: #339933;" />

<!-- nose -->
<path d="M 95 95 L 85 95 A 5 10 0  0 0 95 95 " style="stroke: black; fill: #ffcccc;" />

<!-- mouth -->
<polyline points="60 110, 70 120, 110 120, 120 110" style="stroke: black; fill: none;" />

<!-- whiskers -->
<g id="whiskers">
    <line x1="30" y1="90" x2="70" y2="100" style="stroke: black;" />
    <line x1="30" y1="110" x2="70" y2="100" style="stroke: black;" />
</g>
<use xlink:href="#whiskers" transform="scale(-1 1) translate(-180 0)" />
<text x="0" y="25" style="stroke: none; fill: red; font-size: 16px;">随便画的</text>

</svg>
</body>
</html>
```


##  SVG 中使用 HTML ##

得益于 XML 本身的机制，在 SVG 中使用 HTML 也是很直接的事，只需要指定清楚名字空间就可以了，使用 ``<foreignObject>`` 。


'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="180" height="180" xmlns="http://www.w3.org/2000/svg">
<title>Demo</title>
<desc>Hello World</desc>
<foreignObject x="0" y="0" width="180px" height="180px"
               requiredFeatures="https://www.w3.org/TR/SVG11/feature#Extensibility">
    <body xmlns="http://www.w3.org/1999/xhtml">
    <style type="text/css">h1#in-svg{color: red;}</style>
        <h1 id="in-svg">大标题</h1>
    </body>
</foreignObject>
</svg>
'''


```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="180" height="180" xmlns="http://www.w3.org/2000/svg">
<title>Demo</title>
<desc>Hello World</desc>
<foreignObject x="0" y="0" width="180px" height="180px"
               requiredFeatures="https://www.w3.org/TR/SVG11/feature#Extensibility">
    <body xmlns="http://www.w3.org/1999/xhtml">
    <style type="text/css">h1#in-svg{color: red;}</style>
        <h1 id="in-svg">大标题</h1>
    </body>
</foreignObject>
</svg>
```

当然，因为 SVG 使用时是需要指定尺寸的，中间的 HTML 的显示效果其实不太好把握。并且，中间的 HTML 也不是隔离的环境，页面的 CSS 都会作用到的（这点还真是遗憾啊）。

同时，我们要想到， SVG 不一定是在浏览器环境查看的，那么非浏览器环境是否能正常 ``xhtml`` 的名字空间，那不一定。这时，如果要作兼容处理，或兼容提示的话，可以使用 ``<switch>`` 标签：

```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="180" height="180" xmlns="http://www.w3.org/2000/svg">
<title>Demo</title>
<desc>Hello World</desc>
<switch>
    <foreignObject x="0" y="0" width="180px" height="180px"
                   requiredFeatures="https://www.w3.org/TR/SVG11/feature#Extensibility">
        <body xmlns="http://www.w3.org/1999/xhtml">
        <style type="text/css">h1#in-svg{color: red;}</style>
            <h1 id="in-svg">大标题</h1>
        </body>
    </foreignObject>
    <text x="0" y="20%">显示不了 HTML</text>
</switch>
</svg>
```


# 坐标系统 #


## 基本视图 ##

SVG 默认的坐标系统是以 *左上角* 为原点，向右向下为正向。

在根节点上需要设置当前视图 *Viewport* 的尺寸，即 ``svg`` 标签的 ``width`` 和 ``height`` 属性，这个值，是有 *单位* 概念的。

```svg
<svg width="180px" height="180px" xmlns="http://www.w3.org/2000/svg"></svg>
```

默认单位是 ``px`` 像素，其它的单位还有：

- ``em``
- ``ex``
- ``pt``
- ``pc``
- ``cm``
- ``mm``
- ``in``


这里要注意的一点是，即使在 ``svg`` 中使用的是非 ``px`` 单位，也不会让里面的默认单位变成非 ``px`` ：


'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="1cm" height="1cm" xmlns="http://www.w3.org/2000/svg">
    <line x1="0" y1="10" x2="10" y2="10" style="stroke: black;" />
    <line x1="0cm" y1="0.5cm" x2="1cm" y2="0.5cm" style="stroke: black;" />
</svg>
'''

```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="1cm" height="1cm" xmlns="http://www.w3.org/2000/svg">
    <line x1="0" y1="10" x2="10" y2="10" style="stroke: black;" />
    <line x1="0cm" y1="0.5cm" x2="1cm" y2="0.5cm" style="stroke: black;" />
</svg>
```

上例中，第一条线，长 ``10`` ，单位还是 ``px`` 的。


## 用户坐标系 ##

前面说的，在使用尺寸时，如果数字后面没有单位，那么默认会按 ``px`` 处理。但是这个行为是可以被改变的，SVG 允许你自定义一个 *单位长度* ，这种情况下，数字后面没有单位，则会按设置的 *单位长度* 来处理了。

设置的方法，是使用 ``viewBox`` 属性：

```svg
<svg width="10cm" height="10cm" viewBox="0 0 20 20"></svg>
```

上面的设置，意义是把一个 长 10cm 划成了 20 个单位，高 10cm 也划成了 20 个单位。这时再画线：

```svg
<line x1="0" y1="0" x2="10" y2="0" />
```

意义就变成了这条线长是 *10个单位* ，换算过来就是 ``10cm / 20 * 10 = 5cm`` 长。

当然， ``viewBox`` 这东西实际上要复杂得多的，它的四个参数的含义是 ``xMin yMin width height`` ，这四个参数值与 *svg* 的 ``width`` 和 ``height`` 共同作用，会有很多种情况。

在 https://sarasoueidan.com/demos/interactive-svg-coordinate-system/index.html 这里，有人做了一个即时交互的工具，可以直观地看到在不同设置项下， ``viewBox`` 具体的效果。

本质上， ``svg`` 的 ``width`` 和 ``height`` 创建了一个坐标系，就叫 *标准坐标系* 吧，而 ``viewBox`` 则是被手动创建了另外一个坐标系，就叫 *用户坐标系* 了。如果没有设置过 ``viewBox`` ，那么可以理解成这两个坐标系是完全重合的状态。SVG 的绘制总是在用户坐标系进行，之后，再把用户坐标系按 ``viewBox`` 配置的方式进行“揉捏缩放”，最后放到标准坐标系上进行显示。以何种方式放置用户坐标系，就是 ``preserveAspectRatio`` 属性要处理的。

先看一维的情况：

```text
a                b
|________________|

va                                   vb
|____________________________________|

va'     vb'
|_______|

```

这里， ``C(a, b)`` 假设是标准坐标系， ``C(va, vb)`` 和 ``C(va', vb')`` 分别是两个用户坐标系。显示，当我们想把 ``C(va, vb)`` 的东西放到 ``C(a, b)`` 里完整显示的话，就需要把 ``C(va, vb)`` 缩小些，同理，也需要把 ``C(va', vb')`` 放大一点，变化之后就是：

```text

a                b
|________________|

va               vb              <-- vb
|________________|__ __ __ __ __ __ _|

va'     vb' -->  vb'
|_______|__ __ __|

```

这种缩放的处理，在二维情况下，如果考虑维持比例（ ``preserveAspectRatio`` 值为 ``meet``），那么用户坐标系的 ``x`` 或 ``y`` 会被自动拉长，这时多余的“留白”如何处理是 ``preserveAspectRatio`` 第一个参数控制的，默认是 ``xMidYMid`` ，所以 ``preserveAspectRatio`` 默认值完整地为： ``xMidYMid meet`` 。

具体的其它情况，请使用上面的地址中的演示工具自己多体会吧：

- ``用户坐标系`` 的 ``width`` 变大，则画布变扁，此时 ``YMin / YMid / YMax`` 发生作用。
- ``用户坐标系`` 的 ``height`` 变大，则画布变细，此时 ``XMin / XMid / XMax`` 发生作用。


如果 ``preserveAspectRatio`` 的值为 ``none`` 的话，就是不考虑比例，直接把用户坐标系缩放到标准坐标系，这种情况是最简单的。

还有一种情况，就是 ``preserveAspectRatio`` 的值为 ``slice`` 的时候，这种设置，比例也不会变，但是用户坐标系不会去“添加留白适应比例”，而是无法显示的部分直接切割掉。



## 坐标系嵌套 ##

``svg`` 定义了一个系统坐标系， ``svg`` 标签本身是可以嵌套的，所以你可以在 ``svg`` 中再出现很多个 ``svg`` ，每一个 ``svg`` 都有自己独立的坐标系的。


'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
<rect x="100" y="100" width="150" height="120" style="stroke: blue; fill: none;" />
</svg>
'''


```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
    <rect x="100" y="100" width="150" height="120" style="stroke: blue; fill: none;" />
</svg>
```


比如想在上面的矩形中再画个圆，可以很容易地这样做：

'''
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
    <rect x="100" y="100" width="150" height="120" style="stroke: blue; fill: none;" />
    <svg x="100" y="100" width="150" height="120" viewBox="-60 -60 150 120">
        <circle cx="0" cy="0" r="60" style="stroke: red; fill: none;" />
    </svg>
</svg>
'''

```svg
<?xml version="1.0"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
    <rect x="100" y="100" width="150" height="120" style="stroke: blue; fill: none;" />
    <svg x="100" y="100" width="150" height="120" viewBox="-60 -60 150 120">
        <circle cx="0" cy="0" r="60" style="stroke: red; fill: none;" />
    </svg>
</svg>
```


# 基本形状 #


## 线及描边样式 ##

线本身是很简单的， ``line`` 标签，连接两个点 ``x1, y1`` 和 ``x2, y2`` ：

'''
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <line x1="0" y1="0" x2="300" y2="80" stroke="red" />
    <line x1="50" y1="60" x2="380" y2="20" stroke="blue" />
</svg>
'''

```svg
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <line x1="0" y1="0" x2="300" y2="80" stroke="red" />
    <line x1="50" y1="60" x2="380" y2="20" stroke="blue" />
</svg>
```


描边样式的内容有下面这些样式属性：

- 粗细， ``stroke-width`` 。
- 颜色， ``stroke`` ，这里注意一下， ``rgba()`` 的形式虽然可能在浏览器中能正常工作，但是它不是 *svg 1.1* 的标准。 ``currentColor`` 这个关键词，可以从 HTML 中继承颜色。
- 透明度， ``stroke-opacity`` 。
- 虚线定义， ``stroke-dasharray`` ，格式是 ``线长, 间隔`` ，可以有多组，比如 ``"9, 5"`` ， ``"9, 3, 5, 2"`` 。


'''
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <line x1="10" y1="10" x2="390" y2="10" stroke="red" stroke-width="5" stroke-opacity="0.5" />
    <line x1="10" y1="30" x2="390" y2="30" stroke="blue" stroke-width="3" stroke-dasharray="9, 5" />
    <line x1="10" y1="50" x2="390" y2="50" stroke="rgb(45, 21, 89)" stroke-width="2" stroke-dasharray="9, 3, 5, 2" />
    <line x1="10" y1="70" x2="390" y2="70" stroke="#008923" stroke-width="9" stroke-dasharray="9, 3, 5" />
    <line x1="10" y1="90" x2="390" y2="90" stroke="yellow" stroke-width="9" stroke-dasharray="9, 3, 5, 9, 3, 5" />
</svg>
'''

```svg
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <line x1="10" y1="10" x2="390" y2="10" stroke="red" stroke-width="5" stroke-opacity="0.5" />
    <line x1="10" y1="30" x2="390" y2="30" stroke="blue" stroke-width="3" stroke-dasharray="9, 5" />
    <line x1="10" y1="50" x2="390" y2="50" stroke="rgb(45, 21, 89)" stroke-width="2" stroke-dasharray="9, 3, 5, 2" />
    <line x1="10" y1="70" x2="390" y2="70" stroke="#008923" stroke-width="9" stroke-dasharray="9, 3, 5" />
    <line x1="10" y1="90" x2="390" y2="90" stroke="yellow" stroke-width="9" stroke-dasharray="9, 3, 5, 9, 3, 5" />
</svg>
```



## 矩形，圆，椭圆与填充样式 ##

矩形是最简单的一种图形，使用“左上角-长宽”的方式来定义。

'''
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="50" stroke="black" fill="green" />
</svg>
'''

```svg
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="50" stroke="black" fill="green" />
</svg>
```

对于一个矩形，除了用之前的“描边样式”来处理它的边之外，还可以使用“填充样式”来处理里面的颜色：

- ``fill`` ，填充色，格式与 ``stroke`` 相同。
- ``fill-opacity`` ，填充透明度，格式与 ``stroke-opacity`` 相同。


'''
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="40" stroke="black" fill="green" fill-opacity="0.5" />
    <rect x="10" y="60" width="300" height="30" stroke="black" stroke-opacity="0.3" stroke-width="10" fill="green" fill-opacity="0.5" />
</svg>
'''

```svg
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="40" stroke="black" fill="green" fill-opacity="0.5" />
    <rect x="10" y="60" width="300" height="30" stroke="black" stroke-opacity="0.3" stroke-width="10"
          fill="green" fill-opacity="0.5" />
</svg>
```

上面第二个矩阵，它的边看上去有两个颜色，是因为宽为 10 的边，有一半在矩形外，一半在矩形内，矩形外的那部分颜色没有问题，但是矩形内的那部分，因为颜色有透明度，受矩形填充色的作用，看起来就像是另外一个颜色了。

矩阵 ``rect`` 标签，还有一组圆角属性， ``rx`` 和 ``ry`` （只设置一个的话，另一个会默认相同，它们的最大值都是长宽的一半）：


'''
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="40" stroke="black" fill="green" fill-opacity="0.5" rx="50" ry="10" />
    <rect x="10" y="60" width="300" height="30" stroke="black" fill="violet" fill-opacity="0.5" rx="20" />
</svg>
'''

```svg
<svg width="400" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="300" height="40" stroke="black" fill="green" fill-opacity="0.5" rx="50" ry="10" />
    <rect x="10" y="60" width="300" height="30" stroke="black" fill="violet" fill-opacity="0.5" rx="20" />
</svg>
```


圆，椭圆与矩阵差不多的，圆 ``circle`` 是需要确定圆心和半径，椭圆 ``ellipse`` 是需要确定圆心与长短轴。

'''
<svg width="400" height="150" xmlns="http://www.w3.org/2000/svg">
    <circle cx="50" cy="50" r="20" fill="green" />
    <circle cx="120" cy="50" r="20" fill="green" stroke="blue" stroke-width="10" stroke-opacity="0.8" />
    <ellipse cx="220" cy="50" rx="40" ry="20" fill="violet" />
    <ellipse cx="320" cy="50" rx="30" ry="50" fill="chocolate" stroke="skyblue" stroke-width="20" stroke-opacity="0.3" />
</svg>
'''

```svg
<svg width="400" height="150" xmlns="http://www.w3.org/2000/svg">
    <circle cx="50" cy="50" r="20" fill="green" />
    <circle cx="120" cy="50" r="20" fill="green" stroke="blue" stroke-width="10" stroke-opacity="0.8" />
    <ellipse cx="220" cy="50" rx="40" ry="20" fill="violet" />
    <ellipse cx="320" cy="50" rx="30" ry="50" fill="chocolate" stroke="skyblue" stroke-width="20" stroke-opacity="0.3" />
</svg>
```


## 多边形和折线 ##

多边形 ``polygon`` 和折线 ``polyline`` 都是通过连接多个点形成的图形，不同的是，多边形是『封闭』的（即使它是自动封闭的）。


'''
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="15,40 300,10 160,100" fill="chocolate" stroke="none" />
</svg>
'''

```svg
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="15, 40 300, 10 160, 100" fill="chocolate" stroke="none" />
</svg>
```

``points`` 的值需要两个两个地给，用逗号或空格分割都是一样的。


'''
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon  points="15,40 300,10 160,100" fill="none" stroke="blue" stroke-width="3" />
    <polyline points="115,40 380,10 260,100" fill="none" stroke="violet" stroke-width="3" />
</svg>
'''

``polyline`` 只是不会自动封闭而已。



对于多边形 ``polygon`` 还有一个特殊的属性 ``fill-rule`` ，用于控制当多边形的线出现相交情况时，的填充规则（其实是如何算一块区域是否在多边形内的问题）。


'''
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="30,100 330,100 180,180 100,30 370,180" fill="chocolate" fill-rule="nonezero" stroke="green" />
</svg>
'''

```svg
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="30,100 330,100 180,180 100,30 370,180" fill="chocolate" fill-rule="nonezero" stroke="green" />
</svg>
```


'''
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="30,100 330,100 180,180 100,30 370,180" fill="chocolate" fill-rule="evenodd" stroke="green" />
</svg>
'''

```svg
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
    <polygon points="30,100 330,100 180,180 100,30 370,180" fill="chocolate" fill-rule="evenodd" stroke="green" />
</svg>
```

上面分别是 ``fill-rule`` 取值为 ``nonezero`` 和 ``evenodd`` 时的效果，具体的算法规则可以参见： http://blog.csdn.net/freshforiphone/article/details/8273023











