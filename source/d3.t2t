D3学习笔记
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus --mathjax
%!qr: http://www.zouyesheng.com/d3.html
%!format: !email
%%toc


# 第一印象 #

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.min.js"></script>
  </head>
  <body>
    <script type="text/javascript">
      $(function(){
        d3.select('body').append('div').text('Hello D3');
      });
    </script>
  </body>
</html>
```


*D3* 是一套专注于数据可视化处理的工具 https://d3js.org/，链式调用风格配合数据绑定后的向量化操作（vectorized operation）巧妙地实现数据与表现的衔接。

- 链式调用，类似于 jQuery 的选择器方法，代码写出来是一连串的点点点……
- 数据绑定，准确地说其实不算是“绑定”行为，只是在调用时把“数据”与“选择”关联起来，同时 d3 的 api 提供了对这两者之间的差异的处理途径。
- 向量化操作，这点和上面的“数据绑定”是一起的，许多用于数据处理的工具都有类似的机制（比如 Python 的 Pandas http://pandas.pydata.org/），简单来说这个机制可以让你简单地直接处理一个数据集，而不用自己手工再去遍历一次。就像 jQuery 那种直接把后续操作（比如设置样式）作用到当前选择的多个节点上。


d3 的 api 看起来很多，但我觉得核心的东西就是上面三点，其它的，全是为处理数据和展示数据的方便所提供的工具，比如对 svg 的支持，一个数据集与另一个数据集之间的映射，颜色处理工具，等。



# 核心形式 #

## 选择与链式调用 ##

数据展现离不开对 DOM 的操作，这方面 d3 跟 jQuery 比较相似。

``d3.select() / d3.selectAll()`` ：选择符合条件的第一个或全部节点。参数可以直接是节点，或者选择器表达式。比如：

```javascript
d3.select('body');
d3.selectAll('div.circle');
d3.select($('div.wrapper').find('.rectangle')[0]);
```

如果使用 jQuery 的话注意 jQuery 对象与 DOM 节点之间的转换。

``d3.select()`` 的返回值，可以继续被 ``select() / selectAll()`` ：

对于：

```html
<div class="out">
    <div class="in"></div>
    <div class="in"></div>
    <div class="in"></div>
    <div class="in"></div>
</div>
```

可以：

```javascript
d3.select('div.out').selectAll('div.in');
```

选择之后可以跟 jQuery 一样，对节点进行各种样式，属性，内容等的处理：

- ``selection.attr()`` 节点属性。
- ``selection.classed()`` 节点类。
- ``selection.style()`` 节点样式。
- ``selection.property()`` “内属性”。
- ``selection.text() / selection.html()`` 节点内容。
- ``selection.append() selection.remove()`` 添加 / 删除节点。



``classed()`` 的使用：

```javascript
d3.select('body').classed('a b', true);
d3.select('body').classed({a: true, b: false});
```

``style()`` 的使用：

```javascript
d3.select('body').style('background-color', 'red');
d3.select('body').style({'background-color': 'red', height: '200px'});
```

注意，在设置样式时， d3 不像 jQuery 那么智能，知道在 *background-color* 与 *backgroundColor* 之间转换。同时，对于样式值的处理， d3 也不会自己加上 *px* 这种合适的单位。

另外，d3 的选择的结果是一个两层结构：

```html
<div class="action">
  <button id="btn-a">三个</button>
  <button id="btn-b">二个</button>

  <div class="wrapper">
    <div class="item">1</div>
    <div class="item">2</div>
  </div>
</div>

<div class="wrapper">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
</div>
```

对上面的页面，使用：

```javascript
var query = d3.selectAll('div.wrapper').selectAll('.item');
console.log(query);
```

会看到 ``[ [node, node], [node, node, node, node] ]`` 这种结构的输出。



## 数据绑定与变化 ##


d3 的选择结果，可以通过 ``data()`` 方法映射一个数据集，映射之后，选择与数据的差异作为结果返回。这个差异里，有可能是“选择有，但是数据没有”的多余节点，也可能是“选择没有，但是数据有”的空节点占位符。

（注意，这里我们谈 ``data()`` 时，只是以“数据”的方式来演示一些效果，但是别忘了，“函数”本身也是数据，所以 ``data()`` 接收一个列表的函数当然是没问题的，使用时正好与相应的回调函数形式对应，比如在设置样式时）

看一个完整的例子：

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.min.js"></script>
  </head>
  <body>

    <div class="action">
      <button id="btn-a">三个</button>
      <button id="btn-b">二个</button>
    </div>
    <div class="wrapper"></div>

    <script type="text/javascript">
      $(function(){

        function test(item){
          var query = d3.select('div.wrapper').selectAll('.item');
          var bind = query.data(item);
          //var bind = query.data(item, function(d){ return d });
          bind.enter().append('div').classed('item', true).text(function(d, i){return d}); 
                                                                         <-- 这个 d 本身可以是函数哦
          bind.exit().remove();
        }

        $('#btn-a').click(function(){
          test(['A', 'B', 'C']);
          d3.select('div.wrapper').selectAll('.item')
            .each(function(){ $(this).attr('data-d3', this.__data__)});
        });

        $('#btn-b').click(function(){
          test(['B', 'C']);
          d3.select('div.wrapper').selectAll('.item')
            .each(function(){ $(this).attr('data-d3', this.__data__)});
        });


      });
    </script>
  </body>
</html>
```

上面的例子，在点击“三个”按钮之后，会看到“A，B，C”的结果。

但是，点击“二个”按钮，看到的结果是“A，B”，不是“B，C”。除非使用注释掉的这句：

```javascript
//var bind = query.data(item, function(d){ return d });
```

这其中的原因，在于 d3 对于是否传入了第二个函数参数，本来就有不同的处理逻辑。

首先， ``data()`` 方法的第一个参数，可以传入一个列表，或者一个会返回列表的回调函数。如果是一个函数，则这个函数接收的参数是当前选择的节点集的父节点的 ``__data__`` 属性值，及序号：

```html
<div class="wrapper">
    <div class="item">1</div>
    <div class="item">2</div>
</div>
```

```javascript
d3.select('div.wrapper').data(['X', 'Y']);
var query = d3.select('div.wrapper').selectAll('.item');
query.data(function(d, i){
    console.log(d, i);
    return [];
});
```

上面会输出： ``X 0`` 的结果。

这里提到的 ``__data__`` 属性值，就是在 ``data()`` 方法调用之后，节点中绑定的数据（放在节点的 ``__data__`` 属性）。

看到 ``data()`` 方法的调用时，始终要留意考虑两方面的东西，一方面是当前选择的节点集（及这些节点集的 ``__data__`` 状态），另一方面是 ``data()`` 方法调用时传入的数据。

``data()`` 调用之后：

- 本身后续得到的是 *匹配节点* ，表示这些节点的 ``__data__`` 属性更新了。
- ``enter()`` 得到 *新增节点* （的占位符），表示这些节点在数据中，但是不在当前选择中。
- ``exit()`` 得到 *删除节点* （多余的），表示这些节点不在数据中，但在当前选择中（是否删除在于你怎么处理了）。


关于 *匹配节点* 看一个列子：

```html
<div class="wrapper">
    <div class="item">1</div>
    <div class="item">2</div>
    <div class="item">3</div>
    <div class="item">4</div>
</div>
```

```javascript
d3.select('div.wrapper').selectAll('.item')
    .data(['A', 'B'])
    .style('color', 'red')
    .each(
        function(){
            $(this).attr('data-d3', this.__data__);
        }
    );
```

结果就是 ``1`` 和 ``2`` 变成红色。随便再把 ``__data__`` 属性放出来看看。

注意，前面说过， ``selectAll()`` 结果是两层结构的， ``data()`` 传入的数据是单层的（即使形式是多层，它的作用也只是一层），所以 ``data()`` 传入的数据是会在当前的所有选择集上遍历作用一次的。


---------------------------


当调用 ``data()`` 方法没有传第二个函数参数时：

- 按序号对应关系，节点的 ``__data__`` 设置为相应的数据。
- 所以 *匹配节点* 是前 N 个， N 为当前选择节点个数与传入数据个数的小者。
- 如果有多出来的数据，作为 *新增节点* ， ``enter()`` 的结果。
- 如果有多出来的节点，作为 *删除节点* ， ``exit()`` 的结果。


所以刚才先点击“三个”按钮，再点击“二个”按钮，发生的事是：

- 点“三个”按钮时，当前选择节点为空，于是会有三个 *新增节点* ，依次绑定的数据是 ``A, B, C`` 。
- 再点“二个”按钮时，当前选择是三个绑定了数据的节点，但是只有两个数据传入，于是第三个节点被作为 *删除节点* ， ``bind.exit().remove()`` 会把它删除掉，就完了，这里没有涉及任何数据的表现上的更新。所以页面上还显示 ``A, B`` ，虽然，前两个节点的绑定数据，已经从 ``A, B`` 变成 ``B, C`` 了。（看节点属性的 ``data-d3`` 能看到）。


我们把代码改一下：

```javascript
$('#btn-b').click(function(){
    test(['B', 'C']);
    d3.select('div.wrapper').selectAll('.item').text(function(d, i){return d});
});
```

在后面多加一个 ``text()`` 调用，就可以把页面显示改成 ``B, C`` 了。


---------------------------


如果调用 ``data()`` 方法，传了第二个函数参数（ *key 函数* ， ``function(data, index){}``），问题会复杂一点点。从上面的简单的扁平结构按长度出差异，要变成一个映射结构，来判断键值存在与否得出差异。

- 第一步，根据当前选择的节点集，生成一个节点索引，键值由 *key 函数* 得出，传入的 ``data`` 为节点当前 ``__data__`` （如果键值有重复的，则作为 *删除节点* 处理）。
- 第二步，遍历传入的数据的对应键值（把数据传入 *key 函数*），如果这些键值存在节点索引中，则作为 *匹配节点* 处理，更新 ``__data__`` ，不在节点索引中，则作为 *新增节点* 处理。同时这部分命中的索引会做出标记。
- 第三步，遍历当前选择的节点集，根据对应的索引键值，在第二步命令中之外的节点，作为 *删除节点* 处理。


如果我们使用：

```javascript
var bind = query.data(item, function(d){ return d });
```

那么先点“三个”按钮，再点“二个”按钮的流程就变成了：

- 点“三个”按钮时，当前选择节点为空，于是会有三个 *新增节点* ，依次绑定的数据是 ``A, B, C`` 。
- 点“二个”按钮时，因为页面上有三点绑定了数据的节点，根据传入的函数，先生成的节点索引为 ``{A: none, B: node, C: node}`` 。
- 传入数据是 ``['B', 'C']`` ，对于的键值也就是 ``['B', 'C']`` ，所以后两个节点定为 *匹配节点* 处理了。
- 最后遍历当前选择的三个节点，会发现第一个节点对应的键值不在索引中，于是按 *删除节点* 处理。执行 ``bind.exit().remove()`` 后被删除。


最后我们就在页面上看到剩下的 ``B, C`` 了。


---------------------------


前面说了传入的 *key 函数* 用于索引键值的计算，这里注意一下，“键值”与“绑定的数据”，是两个东西（只是前面的例子，它们“碰巧”一样而已）。

把前面的代码稍作修正：

```javascript
function test(item){
    var query = d3.select('div.wrapper').selectAll('.item');
    //var bind = query.data(item);
    var bind = query.data(item, function(d, i){ return i });  // <-----
    bind.enter().append('div').classed('item', true).text(function(d, i){return d});
    bind.exit().remove();
}

$('#btn-a').click(function(){
    test(['A', 'B', 'C']);
    d3.select('div.wrapper').selectAll('.item').each(function(){ $(this).attr('data-d3', this.__data__)});
});

$('#btn-b').click(function(){
    test(['X', 'Y']);
    d3.select('div.wrapper').selectAll('.item').each(function(){ $(this).attr('data-d3', this.__data__)});
});
```

先点“三个”按钮，再点“二个”按钮，最后显示的是 ``A, B`` 了。内容传的是 ``X, Y`` ，但是内容并不影响 *key 函数*的返回（它的返回值是序号嘛）。

注意，跟之前一样，虽然当前显示的是 ``A, B`` 了，但是，实际上两个节点绑定的数据已经变成 ``X, Y`` 了。



## 多层数据的绑定与展开 ##

先把前面提过的，也许不起眼的两句话列出来：

- ``data()`` 传入的数据是单层的（即使形式是多层，它的作用也只是一层）。
- ``data()`` 方法的第一个参数，可以传入一个列表，或者一个会返回列表的回调函数。如果是一个函数，则这个函数接收的参数是当前选择的节点集的父节点的 ``__data__`` 属性值，及序号。


假设我们有一个三层的数据：

```javascript
var info = [
    [
        { name: zys, url: www.zouyesheng.com },
        { name: google, url: google.com },
        { name: taobao, url: www.taobao.com },
    ],
    [
        { name: zys, url: www.zouyesheng.com },
        { name: google, url: google.com },
        { name: taobao, url: www.taobao.com },
    ]
];
```

要如何绑定展示出来呢，比如要放到 2 个表格中，表格有 name 和 url 两列。

直观地我们能想到：

```javascript
d3.selectAll('table').data(info).enter().append('table');
d3.selectAll('table').selectAll('tr') ... ...
```

接下来呢？

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.js"></script>
  </head>
  <body>

    <script type="text/javascript">
      $(function(){
        var info = [
          [
            { name: 'zys', url: 'www.zouyesheng.com' },
            { name: 'google', url: 'google.com' },
            { name: 'taobao', url: 'www.taobao.com' }
          ],
          [
            { name: 'zys', url: 'www.zouyesheng.com' },
            { name: 'google', url: 'google.com' },
            { name: 'taobao', url: 'www.taobao.com' }
          ]
        ];

        var table = d3.select('body').selectAll('table')
        .data(info).enter().append('table');

        var tr = table.selectAll('tr')
        .data(function(parent){ return parent }).enter().append('tr');

        var td = tr.selectAll('td')
        .data(function(parent){ return [parent.name, parent.url] }).enter().append('td').text(function(d){return d});

        table.style({
          margin: '10px',
          'border-collapse': 'collapse'
        });

        td.style({
          border: '1px solid #ccc',
          padding: '5px'
        });

      });
    </script>
  </body>
</html>
```

``data()`` 的数据形式可以是一个回调函数，这个回调函数接收的是父级节点的 ``__data__`` ，而我们在绑定数据的时候，数据的形式是没有限制的。所以父节点中可以保存足够复杂的数据来供给子节点进一步的展开。只需要记住，这个回调函数需要返回一个列表就可以了。

（突然想到，这个回调函数是不支持异步的，但愿不会碰到这种需求吧）

看上面的代码，多层的展开这点不论， ``table`` ， ``td`` 这种 ``selectAll()`` 的结果先保存下来，最后再指定处理它们的样式，这种方式也非常漂亮。

这里注意一下， ``data()`` 中传入的是函数的话， ``data()`` 最后得到的结果是回调函数的返回值，那么，多次调用同一个函数时的状态控制方面，是可以有很多种玩法的（比如每调用一次就多一个值之类的）。



# 动画效果 #


## 基本使用 ##


动画， *transition* ，是 d3 中我觉得很赞的一块东西，特别是跟 ``data()`` 的 ``enter()`` 和 ``exit()`` 配合起来使用时。

``transition()`` 的基本使用方法类似 jQuery 的 ``animate()``  ，给出目标样式，中间的补间动画效果会自动处理。

```javascript
$(function(){
  d3.select('body').append('div')
  .style({
    width: '100px',
    height: '100px',
    'background-color': 'red',
    'margin-left': '0'
  })
  .transition()
  .delay(1000)
  .duration(2000)
  .style({
    'margin-left': '300px'
  });
});
```

上面的代码效果是，一个红色方块，在 1 秒种之后，会花 2 秒时间从左边移动到右边。

``transition()`` 调用之后，后续会有一些方法来控制动画的一些细节：

- ``transition([name])`` 声明动画的时候是可以指定名字的，这样可以为同一目标设置多组不同名的动画。
- ``duration()`` 指定动画的时间，默认是 250 毫秒。
- ``delay()`` 播放前的延迟时间，默认是 0 。
- ``tween()`` 自定义补间动画的实现函数。
- ``ease()`` 指定“变化模型”的函数，默认是 *cubicInOut*。



## transition() ##


先说，``transition([name])`` 。如果你想对于同一个节点，有多个动画一个接一个地发生的话，可以简单地串连调用 ``transition()`` 就可以了：

```javascript
var query = d3.select('body').append('div')
.style({
  width: '100px',
  height: '100px',
  'background-color': 'red',
  'margin-left': '0',
  'margin-top': '0'
});

query
.transition()
.delay(500)
.duration(2000)
.style({
  'margin-left': '300px'
}).transition()
.duration(2500)
.style({
  'margin-top': '300px'
})
;
```

但是如果想让多个动画效果同时发生，那么除了对选择对象多次应用 ``transition()`` 之外，还有指定不同的名字。

不指定名字：

```javascript
query
.transition()
.delay(500)
.duration(2000)
.style({
  'margin-left': '300px'
});

query
.transition()
.duration(2500)
.style({
  'margin-top': '300px'
});
```

这样是不行的，后定义的会覆盖先前定义的，所以结果就是方块只会往下移，而不会向右移动了。

多次调用 ``transition()`` 时指定不同名字：

```javascript
query
.transition('x')
.delay(500)
.duration(2000)
.style({
  'margin-left': '300px'
});

query
.transition('y')
.duration(2500)
.style({
  'margin-top': '300px'
});
```

指定名字之后，右移和下移的行为就会同时执行，看起来方块的移动路径就像是一条弧线。

跟 ``transition()`` 相关的其它一些 api ，也是支持传入一个 ``name`` 用来指定名字的，比如 ``tween([name])`` 。


## tween() ##


现在来说 ``tween()`` ，这个是用来自定义补间动画实现的，你可以认为 ``style()`` 样式上动画效果的自动实现，只是 d3 官方预先使用 ``tween()`` 做了一些事而已。

```javascript
var query = d3.select('body').append('div')
.style({
  width: '100px',
  height: '100px',
  'background-color': 'red',
  'margin-left': '0',
  'margin-top': '0'
});

query
.transition()
.delay(500)
.duration(2000)
.style({
  'margin-left': '300px'
}).
tween('', function(d, i){
  var that = this;
  return function(t){
    $(that).text(t);
  }
});
```

上面的代码能在方块移动过程中看到里面文本的变化。从中看 ``tween()`` 的调用方法，第一个参数是一个名字，不能省略。第二个参数是一个返回函数的函数，它本身接收的参数是当前节点绑定的数据（ ``data()`` 方法），返回的函数，其接收的参数是一个“时间位置”，取值范围 ``[0, 1]`` 。




## ease() ##


最后说一下 ``ease()`` ，它是用来指定一个关于“位置-时间”的函数的方法，“位置-时间”的函数，表现出来可以是移动速度的快慢，位置回弹等，这些关系通过一个曲线很容易看出来， http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm 这里有一个专门生成这类函数的在线工具。


注意，这部分是我自己根据执行效果的理解，并不是解读源码得出的结论。


``ease()`` 方法可以接收一个函数定义，这个函数接收一个参数 ``t`` ，返回一个新的 ``t'`` 。 对于这个 ``t`` ，可以理解成是整个动画过程的匀速等分快照，换句话说，这个动画的所有纸片已经制作完成，而现在交由我们来处理的这个 ``ease()`` 方法，其作用就是控制播放这个已完成的动画纸片的。

举个例子，假设我们要把一个方块，花 10 秒的时间从 0 的位置，向右移动到 100 的位置。那么按匀速条件，我们可以知道第 0 秒时，位置是 0 ，第 1 秒时，位置是 10 ，以此类推，我们就可以得到每秒时刻这个方块的位置，就是 ``[0, 0], [1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90], [10, 100]`` 。把这每个“时刻-位置”对相像成一张纸。现在联想一下动画的原理，假设我们以 1 秒为周期（1 秒 1 帧），每过 1 秒，我就向你要一张纸，而给我哪张纸就是 ``ease()`` 方法中的函数做的事。

从第 0 秒开始：

- 给我 0 秒纸， ``[10, 100]``
- 给我 1 秒纸， ``[9, 90]``
- 给我 2 秒纸， ``[8, 80]``
- ...


现在过了 3 秒，那根据给的纸的效果，连续起来，我们看到的就是一个倒播的效果，位置变化是 ``100, 90, 80`` 嘛。

回到 ``ease()`` 接收的函数中的那个 ``t`` 参数。我们的例子是在具体的 10 秒时间内，向右移动 100 个单位。把时间与运动状态作一般化处理，我们可以把上面的纸片看成是在某个时刻的具体状态， ``[t1, s1], [t2, s2], [t3, s3]，... [tn, sn]`` 。现在我们只要定一个每秒帧数，就可以把这些纸片全部确定下来。然后时间一般化处理成 ``0 ~ 1`` ，同样的例子，比如我们定每秒 10 帧， 10 秒就有 100 帧， ``0 ~ 1`` 分成 100 份就是 ``0.01`` 的间隔。

```javascript
ease(function(t){});
```

``function(t){}`` 中的 ``t`` 参数，就是这个 ``0 ~ 1`` 的一般化后的时刻。而我们要返回的东西，也是一个时刻，事实上这个时刻就是代表其对应的那张纸片了。


考虑：

```javascript
function(t){ return 1 - t; }
```

这样的一个函数实现。

- 第 0 时刻时，得到的是 ``1 - 0 = 1`` 这个时刻标记的卡片，也就是位置在 100 上。
- 第 0.01 时刻时，得到的是 ``1 - 0.01 = 0.99`` 这个时刻标记的卡片，也就是位置在 99 上。
- 第 0.02 时刻时，得到的是 ``1 - 0.02 = 0.98`` 这个时刻标记的卡片，也就是位置在 98 上。
- ...


所以， ``ease(function(t){ return 1 - t })`` 就是一个“倒播”的效果。


```javascript
var query = d3.select('body').append('div')
.style({
  width: '100px',
  height: '100px',
  'background-color': 'red',
  'margin-left': '0',
  'margin-top': '0'
});

query
.transition()
.delay(500)
.duration(2000)
.ease(function(t){
  return 1 - t;
})
.style({
  'margin-left': '800px'
});
```

对于 ``function(t){}`` 这个函数的实现，很自然地就可以理解：

- ``t`` 是一个匀速的正向运动。
- ``1 - t`` 是匀速逆向运动。
- ``t * t`` 是加速运动。
- ``if (t < 0.5) {return t} else { return 1 }`` 就是匀速运动一半之后，突然就直接到达终点了。


当然，你还可以实现很复杂的效果，什么弹性模拟，现实的物理碰撞模拟等。

d3 的实现中， ``ease()`` 方法不光能接收一个 ``function(t){}`` 函数，它还可以直接指定使用 d3 中已经实现的一些变化效果，比如：

```javascript
ease('linear');
ease('poly', '3');
ease('elastic', '2', '0.5')
```

第一个参数是已实现的函数名，后面的参数是对应函数需要的参数，已实现的有 https://github.com/mbostock/d3/wiki/Transitions#d3_ease：

```text
- linear - the identity function, t.
- poly(k) - raises t to the specified power k (e.g., 3).
- quad - equivalent to poly(2).
- cubic - equivalent to poly(3).
- sin - applies the trigonometric function sin.
- exp - raises 2 to a power based on t.
- circle - the quarter circle.
- elastic(a, p) - simulates an elastic band; may extend slightly beyond 0 and 1.
- back(s) - simulates backing into a parking space.
- bounce - simulates a bouncy collision.
```


## 数据绑定后的动画处理 ##

``data()`` 前面已经介绍过了，通过它注入数据之后，使用 ``enter()`` 获取新增的节点，使用 ``exit()`` 获取多余的节点。自然地，在 ``enter()`` 和 ``exit()`` 之后，我们可以使用 ``transition()`` ，这样就可以为将要新增的节点及将要删除的节点添加动画效果了。


```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.js"></script>
  </head>
  <body>


    <script type="text/javascript">
      $(function(){
        function process(data){
          var query = d3.select('body').selectAll('.item');
          var bind = query.data(data, function(o){ return o });

          bind.enter()
          .append('div').classed('item', true)
          .text(function(d, i){ return d })
          .style({
            width: '100px',
            height: '100px',
            margin: '20px',
            'background-color': 'red',
            'margin-left': '0'
          })
          .transition()
          .duration(500)
          .style({
            'margin-left': '200px'
          });


          bind.exit()
          .transition()
          .delay(function(d, i){ return i * 300 })
          .duration(5000)
          .style({
            'margin-left': '800px',
            'opacity': '0'
          })
          .remove();

        }

        process(['A', 'B', 'C', 'D', 'E', 'F']);
        setTimeout(function(){
          process(['A', 'C', 'E']);
        }, 2000);


      });
    </script>
  </body>
</html>
```

上面的例子中，在 ``enter()`` 和 ``exit()`` 之上，我们再加入 ``transition()`` ，然后分别为节点的加入及删除定义动画效果，这样，在数据变化时，“入”和“出”阶段都有动画过渡了。



# 先尽量画一个柱状图 #

前面说了那么多，我们就按已知的东西做点事吧。

一组数据如下：


||  页面名字  |  点击次数  ||
|  A  |  10  |
|  B  |  20  |
|  C  |  100  |
|  D  |  80  |
|  E  |  40  |


这是一种典型的原始数据形式，关注列。在这组数据中，我们把第一列作为 X 轴数据，第二列作为 Y 轴数据。

最后出来的图形大概像：

```text
             _
            | |
            | |   _
            | |  | |
            | |  | |
            | |  | |
            | |  | |   _ 
            | |  | |  | |
        _   | |  | |  | |
   _   | |  | |  | |  | |
  |_|  |_|  |_|  |_|  |_|
   A    B    C    D    E 
```


我们用 *div* 的属性来表现柱状图，为了方便看，像素值按次数的 5 倍计算，每一条宽按 30 像素处理。DOM 结构，我预想大概是这样的：

```html
<div class="chart">
    <div class="block">  X 5
        <div class="bar">
            <div class="space"></div>
        </div>
        <div class="label">A</div>
    </div>
</div>
```

第一步，先不考虑具体的数值，画出 5 个矩形再说。


```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.js"></script>
  </head>
  <body>

    <script type="text/javascript">
      $(function(){
        function process(){
          var data = [
             ['A', 10], 
             ['B', 20], 
             ['C', 100], 
             ['D', 80], 
             ['E', 40]
          ];

          $('body').append('<div class="chart"></div>');

          var block = d3.select('div.chart').selectAll('.block')
          .data(data, function(d){ return d[0]}).enter()
          .append('div').classed('block', true)
          .style({
            float: 'left',
            width: '30px',
            height: '600px',
            margin: '20px'
          });

          var bar = block.selectAll('.bar')
          .data(function(parent){ return [parent[1]] }).enter()
          .append('div').classed('bar', true).style({
            width: '30px',
            height: '500px',
            'background-color': 'red'
          })
          .append('div').classed('space', true);

          var label = block.selectAll('.label')
          .data(function(parent){ return [parent[0]] }).enter()
          .append('div').classed('label', true).text(function(d){ return d })
          .style({
            width: '30px',
            'text-align': 'center'
          });

        }
        process();


      });
    </script>
  </body>
</html>
```

第二步考虑数值的显示，这里用了一个小技巧，因为视觉上柱状图是“从下往上”的，但是在 DOM 布局中，高度的表现是“从上往下”的，所以，这里的处理方式是先把整个块用红色打底，然后根据数据的计算，从上往下，使用一个白块把多余的部分挡住。这部分只会涉及对 ``div.space`` 属性的修改：

```javascript
var bar = block.selectAll('.bar')
.data(function(parent){ return [parent[1]] }).enter()
.append('div').classed('bar', true).style({
  width: '30px',
  height: '500px',
  'background-color': 'red'
})
.append('div').classed('space', true)
.style({
  width: '30px',
  'background-color': 'white'
})
.each(function(d, i){
  d3.select(this).style({
    height: 500 - d * 5 + 'px'
  });
});
```

第三步，加动画，为了好看。一般柱状图有一个“从下往上”的伸展过程。只需要修改之前处理 ``div.space`` 的那个 ``each()`` 里面的内容就可以了。


```javascript
.each(function(d, i){
  d3.select(this).style('height', '500px')
  .transition()
  .duration(800)
  .style({
    height: 500 - d * 5 + 'px'
  });
});
```


这个很毛糙的柱状图就算完成了。当然，我们在实际使用中肯定是不会这样直接拿着 DOM 去画这些图形的，不过这个很简单的例子有助于我们去思考整个“数据可视化”流程中的很多问题：

- “数据可视化”的目的是以合适的形式展现数据，这个合适的形式，包括最朴实的 DOM 结构，不是只有“图”才叫“可视化”。 *SVG*， *Canvas*， *DOM* 都是可以加以利用的手段。
- 同理，d3 提供的是一系列的工具，这些工具中也许包括专门的 *SVG* 类的工具，但是，把 d3 作用于 *SVG* ，或者 *Canvas* ，或者 *DOM* ，那是你的选择，你可以有的选择。
- 在“画”出数据的时候，我们会涉及“画布”（这里我们用的是 DOM），“坐标”（这里的坐标就是 DOM 的从左上往右下），“数据映射”（我们把 100 的次数画出来是 500 像素的高度），等等这些因素。 d3 这个框架，提供了处理这些因素的工具，后面会介绍到。
- 这个例子，我分成了 3 步来处理，那么对于一般的“数据可视化”工程，又有怎样的可参照的流程与实践呢？
- d3 中实现动画如此轻松。


我觉得这是一个不错的开始。



# 数据绑定 #


数据绑定虽然前面已经介绍过了，这里把它单独拿出来再说，是想在这里通过一个例子，把 d3 中的数据绑定很容易坑人的地方讲明白。

数据绑定的基本形式：

```javascript
d3.selectAll('.note').data(item, function(d, i){});
```

然后就是 ``enter()`` 和 ``exit()`` 的事了。

这里特别有 2 点是很容易被人忽视的：

- 在一次“数据刷新”中，会被 ``data()`` 的第二个参数： ``function(d, i){}`` 运算的数据，不光是传入的 ``item`` ，还包括 ``selectAll('.note')`` 选择的页面上已存在的节点的绑定数据。简单来说，如果你把 ``i`` 这个参数打印出来看的话，你看到的不一定是： ``0, 1, 2, 3`` 这样的结果，可能是： ``0, 1, 2, 3, 0, 1, 2, 3`` 。
- d3 的“数据绑定”只是从“数据” -> “节点”的单向映射，并且，数据这层，是 *集合* 的概念，它是 **无序** 的。这点特别注意要把它与节点在页面上是 “有序” 的这个概念区分清楚。如果不能搞明白第一步的细节，那么就牢记： 页面上的节点是数据的反映，它在任何时候顺序是不定的。所以， **不要把实现逻辑依赖到节点的顺序上** 。这点在绘画的时候，通常不是大部分，因为一个点的出现位置是在于它的坐标数据，至于它是第一个出现，还是第二个出现，并不影响它的位置（想想“绝对定位”这类词吧）。


这里通过一个例子来说明上面的内容。

假设我们要做一个数字翻动的效果：

```text
         ^
1  2  3  |
     [4] |

     [3]
1  2  4
```

大概就是这个意思，数字从 N 变成 N + 1 时，是最低位的数字加 1，并且有一个从下往上的动画效果。

先从最简单的情况考虑，实现这个翻动的动画效果。 DOM 结构我考虑的是这样的：

```html
<div class="wrapper" style="height: 50px; overflow: hidden; position: relative;">
    <div class="bit" style="position: absolute; width: 50px; height: 50px; text-align: center; left: 0; bottom: 0;">1</div>
</div>
```

“绝对定位”使动画效果更容易控制，“进入”时的动画，就是 ``bottom`` 从 ``-50px`` 变成 ``0`` ，而“退出”时的动画，就是 ``bottom`` 从 ``0`` 变成 ``50px`` ，这点很好理解。

实现单位数的翻动效果：

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.js"></script>
  </head>
  <body>

    <div class="wrapper" style="height: 50px; overflow: hidden; position: relative;">
    </div>


    <script type="text/javascript">
      $(function(){

        var n = 0;
        setInterval(function(){
          bit(n);
          if( n < 9){n += 1}
          else { n = 0 }
        }, 1000);

        function bit(n){
          var query = d3.select('.wrapper').selectAll('.bit');
          var bind = null;

          bind = query.data([n], function(d, i){
            return d;
          });

          bind.exit()
          .transition()
          .duration(300)
          .style({
            bottom: '50px',
            opacity: '0.2'
          })
          .remove();

          bind.enter().append('div').classed('bit', true)
          .style({
            height: '50px',
            width: '50px',
            'line-height': '50px',
            'text-align': 'center',
            'font-size': '50px',
            'font-weight': 'bold',
            position: 'absolute',
            bottom: '-50px',
            opacity: '0.2'
          })
          .text(function(d){ return d })
          .transition()
          .duration(300)
          .style({
            bottom: '0px',
            opacity: '1'
          });

        }
      });
    </script>
  </body>
</html>
```

上面的代码应该是很容易理解的。我们实现了单位数的翻动效果。现在考虑如何把它扩展到任意位数的数字上。

一种思路是，创建 N 个上面的单位数版本的翻动，然后在外层去调度这 N 个“实例”，这当然是可以的。但是这里，我们为了演示数据绑定的一些“坑”与“实质”，我们考虑直接实现任意位数的数字翻动效果。

对于从 ``100`` 变成 ``101`` 这样的变化，效果应该只有最后一位数的翻动，而不应该是整个 ``100`` 往上动。所以，最开始我们能想到的数据绑定的方式，就是把一个 N 位数，按阶打散。比如 ``100`` 应该拆成 ``1, 0, 0`` 这三个数字作为绑定数据。

这时，如果就把 ``[1, 0, 0]`` 这样的结构扔去绑定，那么显示在信息的结构上还少了一层结构：

```javascript
data([1, 0, 0], function(d, i){});
```

``data()`` 需要的数据，本身是一个列表，所以上述代码的结果就是，我们能在页面上创建三个节点，它们的文本可以是 ``1, 0, 0`` ，但是除此之外，我们并不能维护这三个节点之前的顺序信息，别忘了，我们的原始信息是 ``100`` 这个数字。

也许有人会说， ``functio(d, i){}`` 里面的那个 ``i`` 不就是表示的顺序吗？这就是 d3 中很容易坑人的地方， ``i`` 是数据的顺序（我们使用 ``append()`` 的话，数据总是往后追加的）， ``i`` 不是节点的顺序。

想想下面这个例子的显示效果：

```javascript
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>D3</title>
    <script type="text/javascript" src="http://s.zys.me/js/jq/jquery.min.js"></script>
    <script type="text/javascript" src="http://s.zys.me/js/d3/d3.js"></script>
  </head>
  <body>


    <script type="text/javascript">
      $(function(){
        process([1, 0, 0]);
        setTimeout(function(){ process([1, 0, 1]) }, 1000);
        setTimeout(function(){ process([1, 0, 2]) }, 2000);
        setTimeout(function(){ process([1, 1, 2]) }, 3000);

        //setTimeout(function(){ process([1, 3, 2]) }, 4000);

        function process(item){
          var query = d3.select('body').selectAll('.item');
          var bind = query.data(item, function(d, i){
            return d + '' + i;
          });

          bind.enter().append('div').classed('item', true)
          .text(function(d, i){ return d});

          bind.exit().remove();
        }

      });
    </script>
  </body>
</html>
```

它的结果是我们期望的那样： ``100 -> 101 -> 102 -> 112`` 吗？

最后的 ``112`` 是看不到的，显示出来的是 ``121`` 。

有兴趣的可以自己调整代码去试着找出其中的原因。

这里把开始说的那 2 点再次列出来：


- 在一次“数据刷新”中，会被 ``data()`` 的第二个参数： ``function(d, i){}`` 运算的数据，不光是传入的 ``item`` ，还包括 ``selectAll('.note')`` 选择的页面上已存在的节点的绑定数据。简单来说，如果你把 ``i`` 这个参数打印出来看的话，你看到的不一定是： ``0, 1, 2, 3`` 这样的结果，可能是： ``0, 1, 2, 3, 0, 1, 2, 3`` 。
- d3 的“数据绑定”只是从“数据” -> “节点”的单向映射，并且，数据这层，是 *集合* 的概念，它是 **无序** 的。这点特别注意要把它与节点在页面上是 “有序” 的这个概念区分清楚。如果不能搞明白第一步的细节，那么就牢记： 页面上的节点是数据的反映，它在任何时候顺序是不定的。所以， **不要把实现逻辑依赖到节点的顺序上** 。这点在绘画的时候，通常不是大部分，因为一个点的出现位置是在于它的坐标数据，至于它是第一个出现，还是第二个出现，并不影响它的位置（想想“绝对定位”这类词吧）。


在代码中加入一些调试信息：

```javascript
function process(item){
  console.log('------------');
  var query = d3.select('body').selectAll('.item');
  var bind = query.data(item, function(d, i){
    var id =  d + '|' + i;
    console.log(i, '->', d, '*', id);
    return id;
  });

  bind.enter().append('div').classed('item', true)
  .text(function(d, i){ return d});

  bind.exit().remove();
}
```

我们能看到这样的输出（引号我去掉了，并加上了相关信息）：

```text

------------ A process([1, 0, 0])

0 -> 1 * 1|0
1 -> 0 * 0|1
2 -> 0 * 0|2

------------ B process([1, 0, 1])

0 -> 1 * 1|0 
1 -> 0 * 0|1
2 -> 0 * 0|2     OUT --> 1|0, 0|1
0 -> 1 * 1|0
1 -> 0 * 0|1
2 -> 1 * 1|2     IN --> 1|0, 0|1, 1|2

------------ C process([1, 0, 2])

0 -> 1 * 1|0
1 -> 0 * 0|1
2 -> 1 * 1|2     OUT --> 1|0, 0|1
0 -> 1 * 1|0
1 -> 0 * 0|1
2 -> 2 * 2|2     IN --> 1|0, 0|1, 2|2

------------ D process([1, 1, 2])

0 -> 1 * 1|0
1 -> 0 * 0|1     OUT
2 -> 2 * 2|2         --> 1|0, 2|2
0 -> 1 * 1|0
1 -> 1 * 1|1     IN
2 -> 2 * 2|2        --> 1|0, 2|2, 1|1 --> 1, 2, 1



process([3, 2, 2]) ??

0 -> 1 * 1|0     OUT
1 -> 2 * 2|1     
2 -> 1 * 1|2     OUT --> 2|1

0 -> 3 * 3|0     IN
1 -> 2 * 2|1     
2 -> 2 * 2|2     IN --> 2|1, 3|0, 2|2 --> 2, 3, 2
```

通过上面的输出加注解，我们很容易看出 d3 对数据绑定的处理流程了：

- ``data(item, function(d, i){})`` 第二参数，会有两组数据经过它。
- 第一组是当前页面中已存在的节点及对应的绑定数据， **按节点顺序** 。
- 第二组是调用 ``data()`` 时传入的数据， **按数据结构的顺序** 。
- 然后是对两组数据的比对， **集合概念，无顺序** 。
- 如果使用 ``append()`` ，则最后的结构是多余的去掉，新增的追加到最后， **所以最后的结构，顺序是不定的，跟你传入数据的顺序有关，但不完全由它决定**。


上面的问题搞清楚之后，回到我们的例子中：

```text
         ^
1  2  3  |
     [4] |

     [3]
1  2  4
```

剩下的问题就简单了。一维的 ``[1, 2, 3]`` 因为缺少“顺序”信息，所以是不够用的，那我们可以在数据上再加一维嘛，我们自己维护的顺序就可靠了啊， 使用 ``[ [1, 0], [2, 1], [3, 2] ]`` 的结构就可以完整地描述我们的原始数字了。

不过这样还有一个问题，考虑 ``1234`` 这个数字，就是 ``[ [1, 0], [2, 1], [3, 2], [4, 3] ]``。这里有“位对齐”的问题，按我们的结构 ``123`` 和 ``1234`` 的区别，就是后面在尾部多了一个 ``4`` ，这在数字翻动的表现中显示是不对的，正确的区别应该是 前面多了一个 ``1`` ，变成 ``1123`` ，左起，第二位由 ``1`` 变成 ``2`` ，第三位由 ``2`` 变成 ``3`` ，第四位由 ``3`` 变成了 ``4`` 。要反映这种变化，我们的序号应该从右起：

```text
123  --> [         [1, 2], [2, 1], [3, 0] ]
1234 --> [ [1, 3], [2, 2], [3, 1], [4, 0] ]
```

这跟每位上自己的“阶”是一致的。

数据结构定下来之后，再想想如果表现这种结构，根据前面的经验，最后的用于显示的数据，不一定是：

```javascript
[ [x, 3], [x, 2], [x, 1], [x, 0] ]
```

这种刚好顺序正确的，也可能是：

```javascript
[ [x, 1], [x, 3], [x, 0], [x, 1] ]
```

这样的。但是现在我们面对这种情况，就很容易处理了，正确的序号我们自己编码在其中的。

最后修正过的，支持任意位数数字的 ``bit(n)`` 函数是这样的：

```javascript
function bit(n){
  var query = d3.select('.wrapper').selectAll('.bit');
  var bind = null;
  var s = null;

  if(n){
    s = n.toString().split('');
    s = $.map(s, function(d, i){
      return [[d, s.length - i - 1, s.length]];   // 最后加入总长度是为了处理显示位置的需要
    });

    bind = query.data(s, function(d, i){
      var t = d[0] + Array(d[1] + 1).join('0') + 'L' + d[2];
      return t;
    });
  } else {
    bind = query.data([]);
  }

  bind.exit()
  .transition()
  .duration(300)
  .style({
    bottom: '50px',
    opacity: '0.2'
  })
  .remove();

  bind.enter().append('div').classed('bit', true)
  .style({
    height: '50px',
    width: '50px',
    'line-height': '50px',
    'text-align': 'center',
    'font-size': '50px',
    'font-weight': 'bold',
    position: 'absolute',
    bottom: '-50px',
    opacity: '0.2'
  })
  .each(function(d, i){ d3.select(this).style('left', (d[2] - d[1] - 1) * 50 + 'px')})
  .text(function(d){ return d[0] })
  .transition()
  .duration(300)
  .style({
    bottom: '0px',
    opacity: '1'
  });

}
```


``left`` 值的计算，我们使用自己编码的数据结构中的值，这样即使顺序乱的，也不影响最后的显示（个位数可能放在第一个节点位置）。


现在可以一直跑了：

```javascript
function process(){
  var n = 0;
  var timer = setInterval(function(){
    n += 1;
    bit(n);
  }, 350);
}
process();
```

注意这里的“切换时间”上，要留够 消失/加入 动画的时间，否则节点还没有删除就开始下一轮的数据比对，结果就会有问题。



# 映射与插值 #

如果说前面介绍数据绑定部分的 ``enter()`` / ``exit()`` 是 d3 的神来之笔，那这部分的 *插值* 运用，就是 d3 中的鬼斧神工了。


## 线性数据映射 ##

这里说的“映射”，大概的行为，就像“函数”一样。一个定义域，一个值域。而一个很直观的概念，就是坐标，本质上，也是一个比例尺。

试想，一个 y 值为 100 的点，和一个 y 值为 200 的点，画出来的“物理”位置，其实就是一个“缩放”的过程。假如 100 的点画在 *css* 属性的 *top* 值为 ``X`` 的地方，那么 200 的点，就应该是画在 ``X / 2`` 的地方。



```text
    ---  ---
     ^    ^
     |    |
          |    
   X / 2  |
               TOP
     |    X
     v
          |
     _    |
    | |   |
    | |   v
    | |
    | |   _ 
    | |  | |
    | |  | |
    | |  | |
    |_|  |_|
    
    
```


当然，要转换成 svg 的坐标系也是类似的关系。

那么这些数据上的关系，在 d3 中就可以它的 *scale* 机制来专门处理，比如我们定义一个数值的线性映射关系：

```javascript
var linear = d3.scale.linear().domain([0, 10]).range([0, 100]);
console.log(linear(5)); // 50
```

上面的最后结果是输出 ``50`` ，因为 ``linear()`` , ``domain()``, ``range()`` 这一串的调用定义了一个从 ``[0, 10]`` 这个定义域到 ``[0, 100]`` 值域的，线性的映射关系。那么自然， ``5`` 对应的映射结果就是 ``50`` 了，函数式 ``f(x) = x * 10`` ，很容易看出来。

把 ``domain([0, 10])`` 和 ``range([0, 100])`` 这两个数据换个角度看，其实也就是 ``(0, 0)`` 和 ``(10, 100)`` 这两个点，两点就能确定一条直线嘛。


$$ \frac{y - 0}{x - 0} = \frac{100 - 0}{10 - 0} \Longrightarrow f(x) = 10x $$


纯数字方面的，除了线性映射， d3 还提供了对数映射，幂映射等现成的实现：

```javascript
var pow = d3.scale.pow().exponent(2); // n ^ 2
console.log(pow(4)); // 16
```

上面是一个幂映射。


## 更广义的映射 ##

前面介绍的数值上的映射看起来也许像是简单的一元函数的小把戏，现在我们就更进一步，看一下 d3 中的非单纯数值的映射。








# SVG #

关于 SVG 具体的内容这里不详细介绍了，这块不关注 SVG 自己的细节，有用到的地方再说。根据 d3 的文档，提几点：

- SVG 本身提供了一些“形状”的现成实现，额外的更通用的“路径”，可以使用 *path* 。
- 对 SVG 的“形状”，或者被 *g* 包起来的“形状集”，可以使用 *transform* 对其进行几何变换。
- *fill* 和 *stroke* 是描边和填充属性，可以直接作用标签属性，但更推荐在 css 中使用它们。


html 中的标签是有“名字空间”概念的，比如对于 svg 中的矩形，它们的“完整名称”应该是 ``svg:rect`` ， d3 对一些已知的名字空间有做预处理 https://github.com/mbostock/d3/wiki/Namespaces#prefix ，所以我们在创建了 ``svg`` 节点之后，我们不需要额外关注名字空间的问题。



## 形状 ##


https://github.com/mbostock/d3/wiki/SVG-Shapes


矩形：

```javascript
// svg:rect x="0" y="0" width="0" height="0" rx="0" ry="0"

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('rect');

sharp
.attr('x', '0')
.attr('y', '0')
.attr('rx', '10')
.attr('ry', '100')
.attr('width', '100')
.attr('height', '50')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

圆：

```javascript
// svg:circle cx="0" cy="0" r="0"

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('circle');

sharp
.attr('cx', '20')
.attr('cy', '20')
.attr('r', '10')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

椭圆：

```javascript
// svg:ellipse cx="0" cy="0" rx="0" ry="0"

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('ellipse');

sharp
.attr('cx', '100')
.attr('cy', '100')
.attr('rx', '10')
.attr('ry', '50')
.style({
  fill: 'red',
  stroke: 'blue'
});
```


连线：

```javascript
// svg:line x1="0" y1="0" x2="0" y2="0"

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('line');

sharp
.attr('x1', '100')
.attr('y1', '100')
.attr('x2', '10')
.attr('y2', '50')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

多线段（非闭合）：

```javascript
// svg:polyline points=""

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('polyline');

sharp
.attr('points', '0,0 100,10 80,200 300,50')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

多边形（闭合）：

```javascript
// svg:polygon points=""

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('polygon');

sharp
.attr('points', '0,0 100,10 80,200 300,50')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

文本（这里还会有基线对齐之类的机制）：

```javascript
// svg:text x="0" y="0" dx="0" dy="0" text-anchor="start"

var sharp = d3.select('body').append('svg').attr('width', '1000px').attr('height', '1000px')
              .append('text');

sharp
.attr('x', '100')
.attr('y', '100')
.attr('dx', '0')
.attr('dy', '0')
.text('哈哈哈')
.style({
  fill: 'red',
  stroke: 'blue'
});
```

任意路径： *path* ， https://www.w3.org/TR/SVG/paths.html#PathData

- ``d`` 属性
- 小写是相对位置，大写是绝对位置
- Mm , move 移动
- Ll , line 连线
- Hh, 水平连线
- Vv, 垂直连线
- Z , close 关闭
- 各种曲线...


