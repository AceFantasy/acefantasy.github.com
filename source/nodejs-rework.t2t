记一次用 Node.js 重写工具的过程
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/nodejs-rework.html
%!format: !email
%%toc


之前用 Python 做了一个方便项目开发的脚手架工具，这个工具中用到了 Python 的 C 绑定形式的模块， 于是在安装时就需要机器中有相应的编译环境，比如 OS X 上先装 *ports* 然后用它装一些库。如果事先没有这套编译环境，第一次安装时还是比较折腾的，虽然我已经尽可能详尽地写文档了。

稳定用了一段时间之后，我现在考虑用 Node.js 来把这个工具重新实现一下，这样在环境方面应该就会友好很多了，毕竟 Node.js 的环境肯定是事先就准备好了的。（不过，我好像记得 Node.js 的某些模块也是需要编译环境的）


# 要做什么 #

就是一个 ``z.py`` 的文件，它目前的功能有 5 个：

- ``python z.py init``
- ``python z.py project PROJECT_NAME``
- ``python z.py app PROJECT_NAME APP_NAME``
- ``python z.py sass SASS_FILE_ABSOLUTE_PATH``
- ``python z.py html HTML_FILE_ABSOLUTE_PATH``


``init`` 会创建一个代码库的初始目录结构，当然这个功能几乎不会用到（我所有项目都放一个代码库）。


``project`` 是在代码库中创建一个“项目”的目录结构，大概长这样：

```text
test
├── common
│   ├── app.sass
│   └── app.sass.css
├── config.js
├── iconfont
│   ├── app.sass
│   └── app.sass.css
├── index
│   ├── app.js
│   ├── demo.html
│   └── _index.html
├── page-index
│   ├── app.html
│   ├── app.html.js
│   ├── app.js
│   ├── app.sass
│   ├── app.sass.css
│   └── demo.html
└── service
    └── app.js
```

当然，这个项目名字是 ``test`` ，所以里面的一些文件中的名字是跟 ``test`` 有关的（一些约定）。


``app`` 跟 ``project`` 相似，不过它是创建一个“组件”的目录结构，这是平时使用最多的功能（为此会在 IDE 中专门为它配置“快捷方式”），一个组件大概长这样：

```text
test/first
├── app.html
├── app.html.js
├── app.js
├── app.sass
├── app.sass.css
└── demo.html
```

同理，这个组件是 ``test`` 项目中的名为 ``first`` 的组件，那么上面文件中的一些内容，是跟 ``test`` 和 ``first`` 这些词有关的。比如 ``test/first/app.js`` 中会有：

```javascript
var MODULE_NAME = 'test/first';
var DIRECTIVE_NAME = 'testFirst';
```

这种内容。


``sass`` 的功能是把 ``app.sass`` 变成 ``app.sass.js`` ，就是普通的 *sass* 转换行为。

``html`` 的功能是把 ``app.html`` 变成 ``app.html.js`` ，这个功能简单来说是把 ``app.html`` 中的 html 片段（注意只是片段）以一个字符串形式放到 ``app.html.js`` 中（ ``app.html.js`` 中的内容是 AMD 形式的）。



- ``init``
- ``project``
- ``app``
- ``sass``
- ``html``


5 个功能，对我这个没正经写过 Node.js 的人来说，我预估还是要花些时间的。


# 先要解决什么问题 #

我之所以想把这次重写的过程记录下来，是因为我觉得目前面对的这个问题，算是“一个有经验的人如何去学习使用一种新语言”的典型场景。换句话说，即使选择的不是 Node.js 来重写这个工具，而是其它的 A 语言，X 语言，我接下来要做的事也没有什么不同。

要完成这个工具，我认为我首先要学会使用 Node.js 处理以下场景：

- 标准输入输出在 Node.js 中如何处理。
- 字节与字符，编码，等问题在 Node.js 中是怎样的。
- 如何处理命令行参数。
- 文件 IO。
- 找个解析 HTML 的方法。
- 选择一种模板引擎。


这些问题后面一个一个来搞定。



# 标准输入输出 #

``console.log`` 似乎就是标准输出，但是，显示这只是一个“别名”才对，使用 ``console`` 这个名字作为标准输出太不专业了。

我刚开始为标准输入输出而去翻官方文档时，整个人是懵逼的，找不到 ``system`` ， ``io`` 这类东西啊，后来通过 Google 才知道标准输入输出是放在 ``process`` 这个名字空间下的。

标准输出除了用 ``console.log`` 外，它比较“正式”的名字应该是 ``process.stdout()`` ：

```javascript
var stdout = process.stdout;
stdout.write('ok');
stdout.write('ok');
```

这里注意一下，跟其它语言类似， ``console.log`` 是加 ``\n`` 的。


标准输出有了，随便猜一下，标准错误应该是 ``process.stderr`` 和 ``console.error`` 吧：

```javascript
var stderr = process.stderr;
stderr.write('error\n');
console.error('console');
console.log('stdout');
```

直接看看不出区别的，在 ``bash`` 中稍处理一下（假设上面几行代码在文件 ``test.js`` 中）：

```bash
$ node test 1>/dev/null
error
console

$ node test 2>/dev/null
stdout
```

看起来没问题。

然后是标准输入， ``prcess.stdin`` ，这里就涉及几个读的操作了：

```javascript
var stdin = process.stdin;
var buff = [];

stdin.on('readable', function(){
  var chunk = stdin.read();
  if(chunk !== null){
    buff.push(chunk);
  }
});

stdin.on('end', function(){
  console.log(buff.join('\n'));
});
```

在终端中：

```bash
$ echo "123"|node test.js
123

```

``stdin`` 的 api 就是 *Node.js* 的异步IO 那套，这个地方事件倒是比 ``while 1`` 的死循环好看些。


# Node.js 中的字节与字符 #

我对 Node.js 中的字符中的细节是没有任何概念的，先从这里着手吧（我源文件是 UTF-8 编码）：

```javascript
console.log(('中文').length);
// 2
```

能看到输出的结果是 ``2`` ，当然，这个 ``2`` 可能真的是表示 ``'中文'`` 这个字符串是 2 个字符，但是也不排除 ``length`` 这个方法实现上的处理。

暂且认为字符串在 Node.js 中是“字符”的概念，那么接下来，把文件的源码改成 GBK 看看会发生什么：

```javascript
$ iconv demo.js -f utf8 -t gbk > demo.gbk.js
$ node demo.gbk.js
4
```

输出的是 ``4`` ， WTF …… ，这不被坑成猪头才怪。

通过 google 之后，目前我对 Node.js 的概念是，Node.js 中的字符串是“字符”的概念，但是，它的源文件只能是 utf8 ，换句话说，“编译”时就假定“字符串”中的“字节”是 UTF-8 的编码。

要处理“字节”的话，Node.js 有提供 ``Buffer`` 这个对象，它初始化时接收的数组可以看作是“字节序列”，通过 ``toString(encoding)`` 方法可以转成“字符”，从最简单的 ASCII 开始：

```javascript
var buff = new Buffer([65]);
console.log(buff.toString());
// A
```

给个“中”字的 UTF-8 的三字节：

```javascript
var buff = new Buffer([0xe4, 0xb8, 0xad]);
console.log(buff.toString());
// 中
```

看来 ``toString()`` 的默认行为就是按 UTF-8 进行“解码”啊。

``Buffer`` 还有 ``hex`` 和 ``base64`` 这两个比较常用的编码方式：

```javascript
var buff = new Buffer([0xe4, 0xb8, 0xad]);
console.log(buff.toString('hex'));
console.log(buff.toString('base64'));
console.log(buff.length); // 3
```

``Buffer.length`` 方法得到的就是字节长度了。

从 api 层面考虑的话， ``buff.toString('gbk')`` 应该是按 GBK 编码进行“解码”了，不过，坏消息是目前实现的只有 UTF-8 一种编码。

所以，在 Node.js 中如果涉及到除 UTF-8 之外的其它“字节串”的话，只能借助额外的模块能力来处理，比如 https://github.com/bnoordhuis/node-iconv 。










