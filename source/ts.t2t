TypeScript语言学习参考
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/ts.html
%%toc


#概述与环境安装#

*TypeScript* 是在 *JavaScript* 基础上被微软做出来的新语言，目的是补充 js 的语法，而变更的地方主要是有两点。一是加入了类型声明，二是加入了常见的基于“类”的面向对象语法。前者，“类型声明”使得代码的静态分析成为可能，后者则为组织 js 代码提供了一种更易于被人接受的形式。

说得更具体一点的话，就是 *TypeScript* 以“为了更容易维护与合作”，在语法上给 *JavaScript* 添加了一些明确约束和通用的面向对象能力。比如，你可以明确声明变量的存在（在当前文件中没有，但是你自己清楚它在运行时是没有问题的，比如 ``document`` 在浏览器环境中），明确声明变量的类型（之后 *TypeScript* 的静态分析能力就会配合 IDE 的功能作代码检查了），还有声明函数返回类型，函数参数类型，典型的类，继承，私有方法，等等等等，也许你在其它语言中早已熟悉的东西。

*TypeScript* 目前可以看成是 js 的预处理方案，使用 ts 写的代码，通过编译器得到 js 代码，这里说的“编译”仅仅是在“当前文件”中对代码结构作变换，像变量名什么的是不会被更改的。

使用 npm 可以直接完成 *TypeScript* 的安装：

```bash
sudo npm install -g typescript
```

安装完成之后，在 node 的 bin 目录下，会有一个 ``tsc`` ，这个就是 *TypeScript* 的编译工具，使用它可以从一个 ts 文件编译得到一个 js 文件：

```bash
tsc hello.ts
```

这样，就可以在同目录中得到一个 ``hello.js`` 。

编译工具还有其它的一些选项，具体的直接敲入 ``tsc`` 后看屏幕信息吧。


#声明与预置规则#

不管是从严谨，甚至是合理的角度，我个人认为代码中是不应该存在“无源之水”之类的东西，代码中的每一样东西应该都明确的知道从何而来。退一步说，也应该有一个统一的“全局空间”，“默认空间”之类的概念。不过这东西在 js 环境中确实是有些乱的。语言层面全局中即有 ``parseInt`` 这种函数，也有 ``Date`` 这种对象，还有 ``Math`` 这种名字空间？同时典型浏览器环境暴露在全局中的还有 ``document`` ， ``XMLHttpRequest`` 这些。

当你在一个空白的文件中，写了一句：

```javascript
var dt = new Date()
```

这样的代码的时候， ts 怎么知道 ``Date`` 是什么？或者换一个，写了一句：

```javascript
$.ajax({});
```

ts 又怎么知道 ``$`` 是什么？

它当然不知道，所以，按理说，这种情况下，语法检查就会抛出“未定义的引用”这种错误。但是事实上，上面的代码拿到浏览器中，在加载了相关的资源文件之后，是可以正常运行的。

面对这种问题， ts 有一种 *Ambient Declarations* 的机制，用于显示声明一个外部的“我知道的东西”。

```typescript
declare var $;
$.ajax({});
```

加上 ``declare`` 这句， ts 的语法检查就知道 ``$`` 是什么东西了（但它不管实际运行时它怎么来）。

实际使用时，其实不加 ``declare`` ，对于 ``Date`` ， ``document`` 这些全局对象 ts 也“认识”的，因为在 ts 的机制中，已经预定义了一套声明，在安装目录的 ``/lib/lib.d.ts`` 文件中，里面包含了浏览器 API 和 js 语言层面的已有对象。



#数据类型#

这里提到的“数据类型”包含了两层意义，一方面表示“一个变量是什么东西”，比如 ``var a = '1';`` ，我们可以说这个 ``a`` 是一个字符串。另一方面，表示“如何描述一个变量是什么东西”，举个例子：

```typescript
var a:string[];
```

我们声明了， ``a`` 是一个由数字串组成的列表。但是，如果我们想进一步声明： ``a`` 不光是一个列表，而且它的第一个成员是字符串，第二个成员是数字，这种情况光是 ``string[]`` 就不够了。这时需要写成：

```typescript
var a:[string, number];
```

上面的 ``string[]`` 和 ``[string, number]`` 在 ts 中其实是两种不同的类型，前者是 *Array* ，后者是 *Tuple* 。但是，这两个东西的区别，其实只在“声明”时有，或者说区别只在于“约束”，而不在于实际的数据形式。即反过来看，你无法区别 ``['1', '1']`` 这个值的类型，它对应的到底是 ``string[]`` 这个 *Array* ，还是 ``[string, string]`` 这个 *Tuple* ，当然也可以说它两者都是，从这个角度来说，类型的意义，也仅仅是在于“约束”，跟实际的数据结构完全没有关系的（js 这种高高级的语言本来也不关心）。想明白这点，应该有助于减少纠结。






#控制结构#

#类#

#模块加载#

#与js文件的协作#



