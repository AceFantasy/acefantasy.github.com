一种 BI 报表配置过程描述 DSL 的设计想法
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/ded.html
%!format: !email
%%toc


# 为什么会想到这个？ #

简单来说，现在我们在做 BI 报表的实现时，因为过分地关注呈现结果，而正在把过程中最有价值的能力丢失掉。

比如，我们可能一来，就从呈现结果上去考虑我们需要的数据结构是怎么样的：

![](ga-1.jpg)


对于这个“组件”，上面一排指标，下面一个趋势图，我们大概可以用这样的结构去表示它：

```json
[
    {
        "type": "measure",
        "params": {
            "measure": ["用户", "收入", "转化率", "会话"]
        },
        x: 0,
        y: 0
    },
    {
        "type": "trend",
        "params": {
            "x": "日期",
            "y": "@measure"
        },
        x: 0,
        y: 300
    }
]
```

只是一个示意，事实上，在真实场景中，这样一个看似普通的呈现效果，其在一个可视化编辑器中要实现的挑战，是要大得多的。它里面有太多的细节的东西要去考虑，而上面的例子，甚至还带有“指标切换”的交互行为。

当然，挑战再大，也仅仅是技术实现层面的事，通过不断完善与扩充前面的那个 json 结构，理论上，我们总可以达到目标。

问题是，我们费尽千辛万苦达到的所谓目标，真的是我们关心的吗？

至少，不是我们关心的全部。

前面的 json 只是一两个组件的片段，要考虑整个报表的配置，那么这个 json 配置的规模要膨胀很多很多，直接的结果，就是这个配置本身，已经是无法让人去阅读里面的信息了，同时，对于代码处理来讲，也变成了一个“独特的”，“针对专一系统”的特定配置文件，即，这个报表配置，只能在你的系统中使用，想针对这个配置作一些“转换”到其它系统的处理，几乎是不可能的。（因为其它的很多系统也是同样的设计思路，它们的格式也同样复杂无比）

一旦我们把“呈现效果”在这个配置中越来越多地表示出来，其实我们也就是在“核心价值”外添加很多不重要的东西。为了使我们的可视化报表编辑器足够强大与灵活，对于像颜色到底是红色还是绿色，趁势图 X，Y 轴范围是多少这样的信息，在 json 结构中可能都会保存下来。

最终，这个 json 结构本身已经没有任何数据价值，它的功能变成了单纯的存储信息。就像你精心编写的，富含注释的源代码，编译之后变成了 0 和 1 的指令，它被存储起来，随时准备被执行。可怕的是，我们并没有源代码， json 结构的得到，是具体配置行为被“即时地”，“带状态地”编译之后的结果。

这个 json 结构是一个结果，而得到这个结果的过程信息，已经荡然无存。看到了一个 10 ，可能是 5 + 5 的结果，也可能是 15 - 5 的结果，还可能是 5 * 2 的结果，减法与乘法代表的意义是完全不同的。

回到现实中的场景来说，对于这个 json 结构：

- 针对单一系统，转换成本，生成成本，非常巨大。
- 无法从中看出报表的逻辑层次。比如第一部分，讲什么，从哪里到哪里，第二部分讲什么，又是哪里到哪里。


第一点本质上是一个技术问题。

在这个 json 中，即有数据内容，又有视觉内容，在完成了一个可视化编辑器之后，你会发现你陷入了一个两难境地。这个编辑器的功能越强大， 这个 json 结构就越复杂，也就越绑死在这个编辑系统中。如果当初你的配置目标，是一个可交互的网页，那么，你很难再为这个 json 结构，写一套生成静态网页的逻辑，其它的，生成位图，生成失量图更不用想了。甚至移动端适配，都可能需要在足够的前提下才能进行。

另一方面，其它系统，想要生成这个 json 结构，也不是一件容易的事，有太多细节的东西。比如再做一个简化版可视化编辑器，得花多大的代价才能提取到这个 json 结构的一个子集出来。

好吧，技术的问题，几乎都有历史可以参照。

- C 语言，不同于汇编被绑定在了具体硬件上。这使得你的 C 代码，通过不同平台的编译器，就可以跑在不同平台上。不管你用的操作系统是什么， CPU 是哪家的。这里的思路，是定义 C 语言，然后为它写编译器，而不是为某个平台上的汇编，写转换程序。
- 高德纳给自己发明 TeX 时，就是一种排版描述的抽象，而不依赖于具体的排版载体与形式。巧的是，后面 Adobe 的 PS / PDF 语言，也是同样的东西，不依赖于具体设备的打印描述。所以，今天 TeX -> PDF 算是一个标准转换路径了，而这两个东西产生的联系也使曲高和寡的 TeX 时至今日仍然可以被使用（否则时代更迭，TeX 排出的东西几十年后就没有设备可以打印了）。


不难看出来，一个抽象的，标准的定义集，是多少重要，以及在时间的推演中将产生多么大的收益。






