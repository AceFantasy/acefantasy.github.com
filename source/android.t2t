Android学习参考
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%%toc

#关于此文#

这是一个连 *java* 都不会写的人的学习过程.


#下载开发工具和 SDK#

先从 http://developer.android.com/sdk/index.html 下载开发工具(单独的开发工具即可), 下载好了之后运行它, 选择相应版本的 SDK 安装.

```bash
cd tools
./android
```


工具中可以设置 http 代理, 自己准备一台墙外的机器吧.

开发工具中已经包含了虚拟机, 但是相关的镜像文件是在对应版本的 SDK 中的.

SDK 下载完成之后, 就可以创建一个相应版本的虚拟机, *avd* 了.

对 *avd* 的管理是在开发工具中的, 也可以在启动时指定:

```bash
./android avd
```

为了之后使用方式, 把开发工具中的 ``tools`` 和 ``platform-tools`` 目录位置加入系统变量 ``PATH`` 中.


#使用开发工具创建项目#

Android 的项目有一套目录格式, 开发工具提供了创建项目的功能, 可以直接生成一个项目目录, 先查看一下目前已安装的 SDK 对应的 ID , 之后会用到:

```bash
android list targets
```

把对应版本的 SDK 的 ID 记一下, 然后创建项目:

```bash
android create project \
--target 2 \
--name hello \
--path /home/zys/temp/hello \
--activity MainActivity \
--package me.zys.hello
```

正确情况下, 在 ``/home/zys/temp/hello`` 目录下就会生成一堆文件了:

```text
hello
├── AndroidManifest.xml
├── ant.properties
├── bin
├── build.xml
├── libs
├── local.properties
├── proguard-project.txt
├── project.properties
├── res
│   ├── drawable-hdpi
│   │   └── ic_launcher.png
│   ├── drawable-ldpi
│   │   └── ic_launcher.png
│   ├── drawable-mdpi
│   │   └── ic_launcher.png
│   ├── drawable-xhdpi
│   │   └── ic_launcher.png
│   ├── layout
│   │   └── main.xml
│   └── values
│       └── strings.xml
└── src
    └── me
        └── zys
            └── hello
                └── MainActivity.java
```


其中的文件:

- ``AndroidManifest.xml`` , 项目的配置, 包括包名, 项目名, SDK 的版本, 注册的 *Activity* 等.
- ``build.xml`` , *ant* 的配置文件.
- ``bin`` , 构建后的目标文件所在的目录.
- ``gen`` , 构建阶段生成的源文件所在的目录.
- ``res/layout/main.xml`` *Activity* 的页面.
- ``res/values/strings.xml`` 页面中的字符资源.
- ``MainActivity.java`` 初始的一个 *Activity* 实现.


接下来就可以来编译构建一个 *apk* 包了:

```bash
cd /home/zys/temp/hello
ant build
```

注意相应版本的 SDK 的 *build-tools* 要安装好.

成功的话在 ``bin`` 目录下会有一个 ``hello-debug.apk`` 文件生成, 现在把虚拟机启动起来, 使用 SDK 的 ``platform-tools`` 目录下的 *adb* 工具, 把 apk 包安装到虚拟机中:

```bash
adb install bin/hello-debug.apk
```

对应的卸载是:

```bash
adb uninstall me.zys.hello
```


还可以使用 *adb* 直接启动应用程序, 比如刚才我们安装的 *hello* 项目:

```bash
adb shell am start -n me.zys.hello/me.zys.hello.MainActivity
```

虚拟机会有相应的反应, 就能看到一个 ``Hello World`` 的页面了.


#一个项目是怎么跑起来的#

``AndroidManifest.xml`` 是整个项目的入口, 它里面定义了包名和注册的 *Activity* , 即相关的类名.

项目启动时, 就可以找到一个 *Activity* 类, 比如 ``MainActivity`` :

```java
package me.zys.hello;

import android.app.Activity;
import android.os.Bundle;

public class MainActivity extends Activity
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }
}
```

``onCreate`` 方法会创建一个 *Activity* 页面, ``setContentView`` 会渲染一个"模板".

``R`` 是在构建阶段, 放入 ``me.zys.hello`` 的对象.

``res/layout/main.xml`` 就是页面的模板, 它里面的东西包括资源的引用, 布局管理, 组件管理:

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    >
<TextView
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:text="Hello World, MainActivity"
    />
</LinearLayout>
```

这里说是"模板", 其实有一些不恰当, 因为没有一个"传递参数"的概念, 要想设置模板中的"变量", 是直接把"模板"作为一个对象, 通过方法获取到里面的组件对象, 然后通过方法的调用去设置对象的状态.

先给组件一个 *ID* :

```xml
<TextView android:id="@+id/text"
          android:layout_width="fill_parent"
          android:layout_height="wrap_content"
          android:text="Hello World, MainActivity" />
```

在 *Activity* 的实现中, 就可以通过 *ID* 获取到组件对象, 然后作相应的操作:

```java
package me.zys.hello;

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class MainActivity extends Activity
{
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        TextView widget = (TextView) findViewById(R.id.text);
        widget.setText("haha");
    }
}
```


#一个多页面带交互的例子#

做一个小的应用项目, 功能是有两个页面, 在第一个页面输入文本之后, 点击按钮切换到第二个页面. 第二个页面上会显示输入的文本, 同时有一个可以返回前一个输入页面的按钮.

这个例子中会涉及的东西有:

- 模板中的资源声明与使用.
- 模板中组件的事件处理.
- 多个 *Activity* 的处理机制.
- 多个 *Activity* 中使用 *Intent* 传递信息.


##准备真机的调试环境##

虚拟机自然是可以的, 但是那东西的速度与感觉真的很尴尬. 找一部真的手机, 插上 USB 作开发调试吧.

先通过:

```bash
lsusb
```

确认一下当前的 USB 设备. 插上的那部手机应该名列其中.

然后在 *adb* 中查看一下设备是否已经准备好了:

```bash
adb devices
```

如果看到了 device , 就没问题了. 如果没有, 显示有权限问题, 那可以试着用 ``sudo`` 重启一下 *adb* :

```bash
sudo adb kill-server
sudo adb devices
```

接下来就可以在 IDE 中创建一个项目, 并且马上编译在手机上看一下 ``Hello World`` 的效果了.


##添加组件和事件处理##

先修改 ``main.xml`` 这个模板:

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent" >

    <TextView android:layout_width="fill_parent"
              android:layout_height="wrap_content"
              android:text="Hello World" />

    <EditText android:layout_width="fill_parent"
              android:layout_height="wrap_content"
              android:id="@+id/text" />

    <Button android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Submit" />
</LinearLayout>
```

添加了 *EditText* 和 *Button* 这两个组件, 并且给 *EditText* 设置了一个 *id* . 编译后能看到页面效果.

接下来给按钮添加一个点击的事件处理:

```xml
<Button android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Submit"
        android:onClick="click" />
```

``android:onClick="click"`` 是标明点击时调用 *Activity* 对象中的 ``click`` 方法, 我们添加上 ``click`` 方法:

```java
package me.zys.hello;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

public class MainActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }

    public void click(View view) {
        Log.v("info", "here");
    }
}
```

``Log.v`` 可以在终端打印信息.

我们调整一下 ``click`` 方法的实现, 从 *id* 为 *text* 的组件中, 获取键入的文本:

```java
package me.zys.hello;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;

public class MainActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    }

    public void click(View view) {
        EditText widget = (EditText) findViewById(R.id.text);
        String msg = widget.getText().toString();
        Log.v("info", msg);
    }
}
```

在 IDE 的调试终端输出中, 就可以看到键入的文本内容了.


##添加第二个 Activity##

前面获取的键入文本需要在另外一个页面显示, 所以我们需要再创建一个 *Activity* .

同 ``MainActivity`` 一样, 继承 ``Activity`` , 然后渲染一个模板:

```java
package me.zys.hello;

import android.app.Activity;
import android.os.Bundle;

public class ShowActivity extends Activity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.show);
    }
}
```

需要的 ``show.xml`` 是:

```xml
<?xml version="1.0" encoding="utf-8"?>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

    <TextView android:layout_width="fill_parent"
              android:layout_height="wrap_content"
              android:text="Show" />

</LinearLayout>
```

新的 *Activity* 还需要注册到 ``AndroidManifest.xml`` 文件中:

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="me.zys.hello"
          android:versionCode="1"
          android:versionName="1.0">
    <uses-sdk android:minSdkVersion="10"/>
    <application android:label="@string/app_name">

        <activity android:name="MainActivity"
                  android:label="@string/app_name">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>

        <activity android:name="ShowActivity" android:label="show">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
            </intent-filter>
        </activity>

    </application>
</manifest> 
```

添加了 ``android.intent.action.MAIN`` 这个 ``action`` , 这个 *Activity* 就可以直接被指定启动, 像前面说的 *adb* 的使用方法:

```bash
adb shell am start -n me.zys.hello/me.zys.hello.ShowActivity
```

当然, 在 IDE 中选中相应的类, 点下 *Run* 之类的选项就可以了的.

第二个 *Activity* 就创建好了. 下面要做的, 就是 *Activity* 之间的切换和信息传递.
