JAVA 学习笔记
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/java.html
%!format: !email
%%toc


# HelloWorld #

```java
public class Demo {
    public static void main(String[] args) {
        System.out.println("HelloWorld");
    }
}
```

上面代码在 ``Demo.java`` 文件中，然后使用 ``javac Demo.java`` 编译，得到 ``Demo.class`` ，再使用  ``java Demo`` 执行。


*java* 的文件组织有一些约束：

- 直接执行类，是调用类中的 ``main`` 的静态方法，命令行参数是这个方法的传参。
- 源文件中有每个 ``class`` 定义，都会被编译成一个 ``.class`` 文件。
- 一个源文件中最多只允许有一个 *public* 的 ``class`` 定义，并且这个 *public* 的类名要同文件名一样。


# 包 #

改一个前面的 ``HelloWorld`` ：

```java
package me.zys;

public class Demo {
    public static void main(String[] args) {
        System.out.println("HelloWorld");
    }
}
```

通过 ``package`` 指定了“包”，这里再使用 ``javac Demo.java`` 编译的话，对应的 ``Demo.class`` 会放到： ``./me/zys/Demo.class`` 路径下，这里如果还是 ``java Demo`` ，会报找不到类的错误的。

*java* 中的“包”，有两层意思，一方面关系着一个类的“全名”，另一方面则对应文件系统上的路径。

要正确执行 ``Demo.class`` 的话，如果你当前目录是 ``.`` ，那么需要 ``java me.zys.Demo`` 来执行。可以看出，这个类的名字不是 ``Demo`` ，而是 ``me.zys.Demo`` ，找这个类时，一定是在 ``me/zys/Demo.class`` 这样的路径去找的。

如果执行 ``java me.zys.Demo`` 当然路径不是 ``./me/..`` ，可以使用 ``-classpath`` 参数添加相应的类路径：

```bash
java -classpath /home/zys/temp me.zys.Demo
```


# 数据结构与控制结构 #

## 主类型 primitive type ##

|| 名字 | 标识 | 使用空间 | 取值范围 ||
| 布尔值 | ``boolean`` | 1 bit | 0,1 |
| 字符 | ``char`` | 1 字节 | \u0000 - \uFFFF |
| 字节 | ``byte`` | 1 字节 | -128 - 127 |
| 短整型 | ``short`` | 2 字节 | -32768 - 327676 |
| 整型 | ``int`` | 4 字节 | -21 亿 - 21 亿 |
| 长整型 | ``long`` | 8 字节 | (反正很大了) |
| 单浮点 | ``float`` | 4 字节 | 1.4E-45 - 3.4E+38 |
| 双浮点 | ``double`` | 8 字节 | 4.9E-324 - 1.79E+308 |

需要注意的是， java 中的布尔值是严格判断的，有类型要求，像下面的代码是不允许的：

```java
if( 0 ){
    System.out.println("HelloWorld");
}
```

``char`` 和 ``byte`` 这类单字节的类型， ``'a'`` 和 ``97`` 及 ``\u0061`` 是一样的。


## 字符串 ##

java 中的字符串，不是主类型中的一种，而是一个类 *class* ，因为使用太频繁，所以在语法层面给了它一个特殊照顾，可以使用双引号来创建（ ``char`` 字符是单引号）：

```java
String s = "Hello";
char[] s2 = {'H', 'e', 'l', 'l', 'o'};
```

``s`` 和 ``s2`` 看起来是一样的，不过 java 在判断时，因为它们是不同类型，所以也会判断成是不同的，嗯， java 中“类型”很重要。

java 编译时，字符串是按 UTF-8 处理的，所以源码最好也用 UTF-8 。


## 控制结构 ##

``for`` 有两种形式：

```java
public class Demo {
    public static void main(String[] args) {
        for(int i = 0; i < 10; i++){
            System.out.println(i);
        }
        for(int i: new int[] {0,2,3,4}){
            System.out.println(i);
        }
    }
}
```

``assert`` 的形式是：

```java
assert assertion : errorcode
```

在一般执行中是不起作用的，除非使用 ``-ea`` 或 ``-ea:classname`` 打开断言功能：

```java
public class Demo {
    public static void main(String[] args) {
        assert false : 1;
    }
}
```

直接执行没有任何结果的，要找开断言的话：

```bash
java -ea Demo
```

或者限定只打开指定类中的断言：

```bash
java -ea:Demo Demo
```


# 类 #

*类* 算是 java 中的基本单位，通过 javac 编译得到的一个一个的 ``.class`` 文件，就是类。

一开始提过跟文件名和 *pubilc* 有关的一些约束，如果我们先不管 *public* ， *包* 这些东西的话，我们可以在 ``Demo.java`` 中写这样的代码：

```java
class A {
    public static void main(String[] args) {
        System.out.println("I am A");
    }
}

class B {
    public static void main(String[] args) {
        System.out.println("I am B");
    }
}
```

先编译：

```bash
javac Demo.java
```

可以看到，得到了 ``A.class`` 和 ``B.class`` 现两个产出， ``java A`` 和 ``java B`` 都可以正常执行。


## 可见性限定词与继承 ##

说这些概念前，先需要了解一下“包”和“继承”的概念，“包”前面已经说过了：

```java
package me.zys;

public class Demo {
    public static void main(String[] args) {
        System.out.println("I am Demo");
    }
}
```

``Demo.class`` 会被放到 ``me/zys/Demo.class`` ，它的名字是 ``me.zys.Demo`` 。

继承是写成：

```java
class A extends Demo {
    public static void main(String[] args) {
        System.out.println("I am A");
    }
}
```

限定词，指的是放在类定义前面，或者类成员前面的一个单词，用于控制定义的类，或者成员的可见性的，它有 4 种：

- *public* ，最松的控制，总是可见。
- *private* ，最严的控制，只能自己可见。
- *protected* ，同包可见，或者子类可见。
- （不写），即 *default* 的情况，同包可见。

在源文件中，直接定义“类”，只能用到 *public* 或 *不写* 两种情况，类中的成员，才会用到可能的全部 4 种情况。


*public* 最简单，不用多说了。

*private* 说的“只能自己可见”，具体指的是“自己的类定义中的代码这个范围可见”。


```java
class A {
    private String getHello(){
        return "hello";
    }

    public String getPublicHello(){
        return getHello();
    }
}

public class Demo extends A {
    public static void main(String[] args) {
        A a = new A();
        System.out.println(a.getPublicHello());
    }
}
```

上面代码直接 ``a.getHello()`` 不行，通过 ``getPublicHello()`` 转一下就可以了。


再看 *protected* 的情况：

```java
class A {
    protected String getHello(){
        return "hello";
    }

}

class Demo extends A {
    public static void main(String[] args) {
        A a = new A();
        System.out.println(a.getHello());
    }
}

class Demo2 {
    public static void main(String[] args) {
        A a = new A();
        System.out.println(a.getHello());
    }
}
```

上面的代码执行都没有问题，它们都是“同包”的类，所以 ``getHello()`` 对 ``Demo2`` 可见。


再看， ``me.zys.A`` ：

```java
package me.zys;

public class A {
    protected String getHello(){
        return "hello";
    }
}
```

``Demo`` ：

```java
import me.zys.A;

class Demo extends A {
    public static void main(String[] args) {
        A a = new A();
        System.out.println(a.getHello());
    }
}
```

这样特别注意，虽不是“同包”，但 ``Demo`` 是 ``A`` 的子类，那么为什么 *protected* 的 ``getHello()`` 调用会出错呢？这里实际上算是 *protected* 行为的表述问题。

我觉得正确的描述应该，“作为父类访问时可见”，而不是“在子类中可见”。要正确访问，可以这样改：

```java
import me.zys.A;

class Demo extends A {
    private String getAHello(){
        return super.getHello();
    }

    public static void main(String[] args) {
        Demo d = new Demo();
        System.out.println(d.getAHello());
    }
}
```

当然，如果是同包，就没有这些限制了：

```java
package me.zys;
import me.zys.A;

class Demo extends A {
    public static void main(String[] args) {
        A a = new A();
        System.out.println(a.getHello());
    }
}
```

最后说 *default* ，上面的例子去掉 *protected* 就不行了：

``me.zys.A`` ：

```java
package me.zys;

public class A {
    String getHello(){
        return "hello";
    }
}
```

``Demo`` ：

```java
import me.zys.A;

class Demo extends A {
    private String getAHello(){
        return super.getHello();
    }

    public static void main(String[] args) {
        Demo d = new Demo();
        System.out.println(d.getAHello());
    }
}
```


## 初始化方法 ##


初始化方法指跟类名同名的那个方法定义， java 官方好像就叫它是“构造方法”， *Constructor* 。但它的行为更像 Python 中的 ``__init__`` ，而不是 ``__new__`` ，并且 java 中也没有能改变 ``new`` 结果的方法定义。这个方法做的是初始化实例的一些工作，而不是在定义如何创建实例，所以，我更趋向叫它“初始化方法”。


```java
public class Demo {
    public static void main(String[] args) {
        Demo d = new Demo(333);
        System.out.println(d.a);
    }

    private int a = 0;

    Demo(){
        System.out.println("none");
        this.a = 123;
    }

    Demo(int a){
        System.out.println("int");
        this.a = a;
    }
}
```

初始化方法跟普通的方法相比，有一些特殊的地方：

- 需要跟类同名。
- 不能有任何返回，即使是 ``void`` ，或者 ``this`` 。
- ``public`` 等限定词，影响这个类在哪个范围内可以被“实例化”。
- 一个类，可以有多个同名的初始化方法，根据参数不同，调用时会应用不同的方法。


## 属性和方法 ##

这个没什么多说的，前面的演示基本都已经包括了相关内容了。

如果在子类中，要调用父类的方法，可以使用 ``super`` ：

```java
public class Demo extends A {
    public static void main(String[] args) {
        Demo d = new Demo();
        d.f();
    }

    public void f(){
        super.f();
        System.out.println("f");
    }

    Demo(){
        super();
        System.out.println("int");
    }
}


class A {
    public A(){
        System.out.println("A");
    }

    public void f(){
        System.out.println("f in A");
    }
}
```


## 静态属性和方法 ##

静态属性和方法，定义上，就是加一个 ``static`` 的前缀，这样，“类”本身只是相当于一个名字空间的概念了。

```java
public class Demo {
    public static String s = "Hello";

    public static void out() {
        System.out.println("World");
    }

    public static void main(String[] args) {
        System.out.println(Demo.s);
        Demo.out();
    }
}
```


## 接口 ##

接口本身是定义一套“规则”，然后“类”去“实现”这套规则，那么后面在使用的地方，就可以抽象地，接受某个接口的实现，而不是限定为某个类了。

```java
public class Demo implements Dog, Bird {

    public void run(){
        System.out.println("dog run");
    }

    public void fly(){
        System.out.println("bird fly");
    }

    public static void main(String[] args) {
        Demo d = new Demo();
        d.run();
        d.howl();
        d.fly();
    }
}

interface Dog {
    public void run();
    default public void howl(){
        System.out.println("hoooo");
    }
}

interface Bird {
    public void fly();
}
```

接口中只能有方法，不允许有属性。

本来在接口的定义中，是只需要有“方法定义”，不允许有“方法实现”的，后来 java 为了加入允许有方法实现，但又为了兼容性，所以，如果你在接口中要定义一个有实现的方法，则需要在前面加一个 ``default`` 前缀。

同一个类，可以实现多个接口的。


## 抽象类 ##

```java
public class Demo extends Dog {

    public static void main(String[] args) {
        Demo d = new Demo();
        d.run();
        System.out.println(d.s);
    }
}


abstract class Dog {
    public String s = "Hello";
    public void run(){
        System.out.println("dog run");
    }
}
```


抽象类是不能被直接实例化，只能用来继续使用的类。

某方面来说，它跟“接口”有点像，而它是可以直接定义方法的，跟“接口”的区别，更多只是在使用概念上，一般来说，“接口”是定义行为，而“抽象类”是定义“实体”。


## 枚举类 ##

枚举类一种特殊的类，有自己的特殊语法。表现上，有点像一种包装作用的容器。

最简单的情况，就是定义一组静态成员：

```java
enum Color {
    RED, BLUE;
}

public class Demo {
    public static void main(String[] args) {
        System.out.println(Color.RED);
    }
}
```

复杂一点的例子：

```java
enum Color {
    RED(1), BLUE(2);

    private String name;

    public String getName(){
        return name;
    }

    public Color change(){
        name = "黑";
        return this;
    }

    private Color(int i){
        if(i == 1){
            name = "红";
        }
        if(i == 2){
            name = "蓝";
        }
    }
}

public class Demo {
    public static void main(String[] args) {
        Color c = Color.RED;
        System.out.println(c.getName());
        c.change();
        System.out.println(c.getName());
        System.out.println(Color.RED == Color.RED);
        System.out.println(Color.RED == c);
        System.out.println(Color.RED.getName());
    }
}
```

可以看出， ``Color.RED`` 这个静态成员，是对一个实例的引用，而实例的初始化逻辑就是类的“构造方法”处理的（这个方法要是 ``private`` ，不能是 ``public``），并且这个实例还是“单例”行为。


# 泛型 #

*泛型*，简单来说，就是推迟，确定，类型，或者说，在定义时，我也不知道使用时是什么类型。

考虑：

```java
public class Demo {

    public void hello(? obj){
        System.out.println(obj);
    }

    public static void main(String[] args) {
        System.out.println("HelloWorld");
    }
}
```

这个 ``hello`` ，我也不知道它的传参 ``obj`` 会是什么。

当然，不知道是什么时，总是可以用 ``Object`` 来标明（事实上“原生类型”，“接口”这些也不是 ``Object`` 的子类）：

```java
public class Demo {

    public void hello(Object obj){
        System.out.println(obj);
    }

    public static void main(String[] args) {
        Demo d = new Demo();
        d.hello(d);
    }
}
```

但是，这样做不能解决所有问题，因为向上转成 ``Object`` 之后，有很多更细的信息是丢失的。

```java
public class Demo {

    public void world(){
        System.out.println("world");
    }

    public void hello(Object obj){
        obj.world();
        //((Demo) obj).world();
    }

    public static void main(String[] args) {
        Demo d = new Demo();
        d.hello(d);
    }
}
```

泛型的语法，就是把“类型”信息单独拿出来，使其可以在使用时被传递：

```java
public class Demo<T extends Demo> {

    public void world(){
        System.out.println("world");
    }

    public void hello(T obj){
        obj.world();
    }

    public static void main(String[] args) {
        Demo<Demo> d = new Demo<Demo>();
        d.hello(d);
    }
}
```

通过 ``Demo<Demo>`` 这种语法，带上了额外的类型信息，那么在 ``hello(T obj)`` 中，就可以确定 ``obj`` 的类型了。

这里需要注意，仅仅是 ``hello(T obj)`` 是不够的，因为后面有一个 ``obj.world()`` ，编译器会要求 ``T`` 需要满足 ``拥有 world()`` 的要求，所以，我们必须强制一点，也就是 ``<T extends Demo>`` 。

泛型也可以用到接口上：


```java
interface Any<T> {
    public void hello(T obj);
}

public class Demo<T extends Demo> implements Any<T> {

    public void world(){
        System.out.println("world");
    }

    public void hello(T obj){
        obj.world();
    }

    public static void main(String[] args) {
        Demo<Demo> d = new Demo<Demo>();
        d.hello(d);
    }
}
```


# Collections #

# lambda #


# 反射 #

# 注解 #

*注解* ，从实现上来说，是一种特殊的接口。

在很多对注释的解释中，都会看到，说“注解不会改变原代码”，这种说法，我觉得其实是不严谨的。准备说，注解确实是不改动它挂的对象，但是，一方面不改动对象不代表不改变整个系统的运行逻辑，另一方面，“附加信息”这种行为，说“改”可能不太恰当，但是行为前后的东西是有区别的，就像，你指着一个人，对他是“天才”，或者说他是 SB，这个人还是这个人，但是别人受你的描述的影响，对这个人的看法却可能发生改变，这个过程，你就是在“注解”这个人。


java 本身已经提供了一些注解，比如有一个是 ``@Override`` ，它的作用为，在编译期，检查父类中是否有对应方法：

```java
public class Demo extends Parent {

    @Override
    public void hello(){ }

    @Override
    public void world(){ }

    public static void main(String[] args) {
        System.out.println("HelloWorld");
    }
}

class Parent {
    public void hello(){}
}
```

上面例子中， ``world()`` 这个方法在父类中是不存在的，但是它又被声明成了是一个重写方法，有了额外的这个 ``@Override`` ，在编译期就可以检查出这个“逻辑错误”了（非语法错误）。


在自定义一个注解，要考虑两方面的东西，一方面是如何创建，另一方面是如何使用。前面说了，注解的作用只是附加额外信息，这是前者，而附加信息之后又怎么使用这些信息，某些时候才是更重要的事，这是后者。

创建一个注解，其实是比较简单的，描述清楚 “目标” 和 “生存期” 就差不多了，：

- 目标， *Target*， TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, ANNOTATION_TYPE, PACKAGE, TYPE_PARAMETER, TYPE_USE.
- 生存期， *Retention*, SOURCE, CLASS, RUNTIME.


``@Override`` 是检查父亲方法是否存在，那，我们就做一个，“检查参数是否比 N 大”的 ``@GreaterN(int n)`` 吧。


```java
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@interface GreaterN {
    int value() default 1;
    int n() default 20;
}

public class Demo {
    public void hello(@GreaterN(10) int i){
        System.out.println(i);
    }

    public void world(@GreaterN(n=10) int i){
        System.out.println(i);
    }

    public static void main(String[] args) {
        System.out.println("HelloWorld");
    }
}
```


# 线程与并发 #

# 文件IO #

# 网络IO #

# 类的动态加载 #


