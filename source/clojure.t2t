Clojure学习
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/
%!format: !email
%%toc


# 准备环境 #

## 安装 mit-scheme ##

因为 clojure 的语法与 *scheme* 还是有区别的，在学习阶段，如果要安装 scheme 的话，可以这样处理。

首先在 https://www.gnu.org/software/mit-scheme/ 官网下载对应平台的二进制文件。这里虽然说的是二进制文件，但是安装还是需要编译的。

然后，可以参考 https://www.gnu.org/software/mit-scheme/documentation/stable/mit-scheme-user/Unix-Installation.html 操作。

就是通常的：

```bash
./configure --prefix=/opt/mit-scheme
make
sudo make install
```

完成之后，可以得到对应的 *bin* 目录，里面有 ``scheme`` 可执行文件。

要直接“执行”一个 *scm* 文件的话，可以：

```bash
scheme --quiet < FILE
```

``scheme`` 中的标准输出和换行是：

```scheme
(display (+ 1 1))
(newline)
```


一般会在 ``/opt/mit-scheme/bin`` 下做一个 ``runscheme.sh`` ：

```bash
/opt/mit-scheme/bin/scheme --quiet < "$1"
```

再调整系统的 *PATH* 就可以了。（比如在 ``/etc/profile`` 中加）

VIM 中的文件类型对应配置在 ``~/.vim/ftplugin/scheme.vim`` ：

```vim
noremap <F2> :!runscheme.sh <C-R>=expand("%:p")<CR><Enter>
```


## 使用 lein ##

```bash
sudo apt-get install leiningen
```

你也可以到 https://leiningen.org/#install 下载自安装程序。

安装了 *lein* 之后，运行：

```bash
lein repl
```

第一次使用，会自动下载相关的依赖，当看到 ``user=>`` 时，这个 REPL 工具就启动好了：

```bash
user=> (println "hello world")
hello world
nil
user=> 
```

最简单的 Hello World 就是：

```clj
(println "hello world")
```

REPL 用起来还是有些不方便的，一个 clj 文件可以直接被执行当然更好，使用 ``lein-exec`` 可以使用。

``lein-exec`` 是 *lein* 的一个 plugin ，在 ``~/.lein/profiles.clj`` 中添加：

```clj
{:user {
    :plugins [[lein-exec "0.3.7"]]
}}
```

再次执行 ``lein`` 命令，会自动安装上 ``lein-exec`` ，然后假设 ``demo.clj`` 的内容是：

```clj
(println "hello world")
```

那么：

```bash
lein exec demo.clj
```

就可以看到输出了。


## 直接安装 ##

访问 https://clojure.org/guides/getting_started

下载安装的 shell 文件，执行后， ``bin`` 中就会有相应的可执行程序了。



# 数据类型 #

**数字类：**

|| 名字 | 例子 | 解释 ||
| 长整数 | ``64`` | 64 位整数 |
| 双精度浮点 | ``5.02e23`` ``5.02`` | 64 位双精度浮点 |
| 大整数 | ``64N`` | 无限制 |
| 定点数 | ``1.0M`` | 无限制 |
| 实数 | ``22/7`` | - |


定点数的运算，不会有精度问题：

```clj
user=> (+ 0.1 0.11111111111111222222222)
0.21111111111111225
user=> (+ 0.1M 0.11111111111111222222222M)
0.21111111111111222222222M
```

实数的结果可以仍然是实数：

```clj
user=> (+ 1/3 1/3)
2/3
```


**字符类：**


|| 名字 | 例子 | 解释 ||
| 字符串 | ``"hello"`` | 只能用双引号 |
| 字符 | \e | - |


**其它类型：**

|| 名字 | 例子 | 解释 ||
| 空 | ``nil`` | - |
| 布尔 | ``true`` ``false`` | - |
| 正则表达式 | ``#"[0-9]+"`` | - |
| 关键词 | ``:alpha`` | - |
| 关键词带名字空间 | ``:release/alpha`` | - |
| 符号 | ``map`` ``+`` | *Symbol* |
| 符号带名字空间 | ``clojure.core/+`` | - |


# 数据结构 #

|| 名字 | 例子 | 解释 ||
| 列表 | ``'(1 2 3)`` | *List* |
| 向量 | ``[1 2 3]`` | - |
| 集合 | ``#{1 2 3}`` | - |
| 映射 | ``{:a 1, :b 2}`` | - |


各结构之间，可以嵌套，形成复合结构，比如：

```clj
user=> [#{1 2 3} 2 {:a 1} {:b 2} '(2 3)]
[#{1 3 2} 2 {:a 1} {:b 2} (2 3)]
```



## 向量 ##

- 构造： ``(vector 1 2 3 4)``
- 获取： ``(get [1 2 3 4] 3)``
- 计数： ``(count [1 2 3 4 5])``
- 追加： ``(conj (vector 1 2 3 4) 1 2 3 4)``



## 列表 ##

- 构造： ``'(1 2 3 4)`` ， ``(list 1 2 3 4)``
- 获取： ``(first '(1 2 3))`` ， ``(rest (list 1 2 3 4))`` ， ``(second '(1 2 3 4))``
- 添加： ``(conj '(1 2 2 3) :new)`` （结果中 ``:new`` 是 first）



## 集合 ##

- 构造： ``#{1 2 3}``
- 添加： ``(conj #{1 2 3} 1 2 :new 4 5)``
- 删除： ``(disj #{1 2 3} 1 2)`` *disj* 是 disjoin 意思。
- 检查： ``(contains? #{1 2 :new} :new)``


有序集合：

使用 ``(sorted-set)`` 构造： ``(sorted-set 1 2 3)`` ，之后，对它的操作，返回的也是有序集合。


向量，列表，集合，三种 *Collection* 结构，有很多操作是相同的，同时，一些操作本身，也可以在各种之间混合使用：

- 合并： ``(into #{1 2 3} [3 4 5]``

```clj
user=> (into [4 5 6] #{1 2})
[4 5 6 1 2]
user=> (into '(1 2 3) [3 4 5])
(5 4 3 1 2 3)
user=> (into '(1 2 3) #{1 2 3 4})
(2 3 4 1 1 2 3)
user=> (into [4 5 6] #{1 2})
[4 5 6 1 2]
```


## 映射 ##

map ， 是一种包含成对 key-value 成员的一种结构。

- 构造： ``{1 1 2 2 :new 2, "xx" 23}`` ，成对之间的逗号，无所谓
- 添加： ``(assoc {1 1} :new 2)`` ， ``assoc`` 是 associate 的意思
- 删除： ``(dissoc {1 1 2 2} 2)``
- 获取值： ``(get {1 1 2 2} 1)``
- 绑定后可直接获取值： ``(def a {1 1 2 2})`` ，可以直接 ``(a 1)``
- 如果键是 keyword ，键作为函数也行： ``(def a {:new 123})`` ， ``(:new a)`` 
- 获取可加一个参数，表示默认址： ``(get {1 1} 2 0)``
- 检查： ``(contains? {1 1 2 2} 3)``
- 获取键值对： ``(find {1 1 2 2} 1)`` ，结果是 ``[1 1]`` 。不存在返回 ``nil``
- 键列表： ``(keys {1 1 2 2})`` ，结果是 ``(1 2)``
- 值列表： ``(vals {1 2 3 4})`` ，结果是 ``(2 4)``
- 合并： ``(merge {1 1 2 2} {1 2 3 4} {5 5 1 :new})`` 后面的优先级高
- 有序映射： ``(sorted-map 2 2 1 1)``


如果映射是嵌套的，提供了方便的方法直接跨层访问：

- 获取： ``(get-in {1 {:new 1}} [1 :new])``
- 修改： ``(assoc-in {1 {:new 1}} [1 :new] {:haha 123})``


## Record ##

*Record* 是一种专门的结构，它需要预先定义，一般地，因为结构固定，也会有更好的性能表现。

```clj
user=> (defrecord Person [name age])
user.Person
user=> (def me (->Person "yszou" 12))
#'user/me
user=> (:name me)
"yszou"
```

通过“关键词”赋值，可以用 ``map->Person`` ：

```clj
user=> (def me (map->Person {:name "yszou" :age 12}))
#'user/me
user=> (:name me)
"yszou"
```




# Clojure 的执行过程 #

传统的 java 过程是：

**文件或类源码 -> 编译 (jabac) -> JVM 字节码**


而 Clojure 的过程是：

**表达式 -> Reader -> 编译 -> JVM 字节码**


Clojure 的编译，面对的是 *Reader* 产出的 *Clojure data* 。

这里有 2 点重要的不同：

- Clojure 的输入，是以表达式为单位的。给一个文件，或者在 REPL 中按顺序输入多个表达式，并没有什么不同。
- *Reader* 独立出来，为表达式的预处理提供了一个合适的场所，即“宏”的实现。


## 求值问题 ##

前面说过的数据类型和数据结构，都是合法的表达式，在 Clojure 中，所有表达式均可求值，并且，求值的结构就是它自身，除了两个例外……

这两个例外，就是  *Symbol* 和 *List* 。

*Symbol* 的求值，结果是具体的定义：

```clj
user=> +
#object[clojure.core$_PLUS_ 0x4b8980e4 "clojure.core$_PLUS_@4b8980e4"]
```

*List* 的求值，行为就像 S 表达式一样，第一个成员作为函数，后面成员作为参数：

```clj
user=> (1 2 3)

ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  user$eval2824.invokeStatic (:1)
```

``1`` 不是函数，所以报错了。

```clj
user=> (+ 2 3)
5
```

## 延迟求值 ##

既然 *Symbol* 和 *List* 默认的处理规则并不返回自身，自然就有规则可以让它们“返回自身”，换句话说，让它们先不求值，方法就是加一个引号前缀：

```clj
user=> +
#object[clojure.core$_PLUS_ 0x4b8980e4 "clojure.core$_PLUS_@4b8980e4"]
user=> '+
+
user=> (+ 1 2)
3
user=> '(+ 1 2)
(+ 1 2)
```

理解这个机制的关键，是想清楚， *List* 本身是一个结构，如果你写了一个函数，那么 **接受求值结果** 与 **接受一个列表** 是明显不同的行为。

```clj
user=> (println (+ 1 2))
3
nil
user=> (println '(+ 1 2))
(+ 1 2)
nil
user=> (println [1 2 3])
[1 2 3]
nil
```

*Symbol* 或是一个 对象，同理：

```clj
user=> (println '+)
+
nil
user=> (println +)
#object[clojure.core$_PLUS_ 0x4b8980e4 clojure.core$_PLUS_@4b8980e4]
nil
```


# REPL 工具 #


REPL 环境，有一个专门的包提供了一些实用的工具：

```clj
(require '[clojure.repl :refer :all])
```

在 *repl* 中，提供的函数有：

- ``doc`` ，查看 *Symbol* 的定义。 ``(doc +)``
- ``apropos`` ，查看某个字符的解释序列。 ``(apropos "+")``
- ``find-doc`` ，搜索文档。 ``(find-doc "replace")``
- ``dir`` ，查看名字空间下的所有定义。 ``(dir clojure.core)``
- ``source`` ，查看定义的源码。 ``(source +)``




# 函数 #

## 基本定义 ##


```clj
user=> (defn show [name] (str "Hello, " name) )
#'user/show
user=> (show "123")
"Hello, 123"
```

多种参数:

```clj
user=> (defn show
  #_=>   ([] (show "World"))
  #_=>   ([name] (str "Hello, " name))
  #_=> )
#'user/show                                                                
user=> (show)
"Hello, World"                                                             
user=> (show "xx")                                                         
"Hello, xx" 
```

可变参数，使用 ``&`` ，则不定参数会放到一个 *List* 中传递：

```clj
user=> (defn show [name & other] (println name other))
#'user/show
user=> (show "1" "2" "3")
1 (2 3)
nil
user=> (show "1")
1 nil
```

匿名函数，使用 ``fn`` 定义：

```clj
user=> ( (fn [name] (println name)) "hahah" )
hahah
```

实际上， ``defn`` 相当于 ``(def name (fn [name] (println name)))`` 。


匿名函数的简写形式 ``#()`` ：

- 使用 ``%`` 引用单一的一个参数。
- 使用 ``%1`` , ``%2`` 引用多个参数中的某个。
- 使用 ``%&`` 引用不定参数。


```clj
user=> (#(+ 6 %) 1)
7

user=> (#(println %2 %1) "hello" "world")
world hello

user=> (#(println %&) "a" "b" "c")
(a b c)
```


``apply`` 的使用，使用 ``apply`` 显式调用函数，可以把参数包装到一个 *List* 中传递：

```clj
user=> (apply #(println %2 %1 %3) "1" '("2" "3"))
2 1 3
```

注意，唯一的 *List* 只能掉到最后，否则，解释的方式会不一样：

```clj
user=> (apply #(println %2 %1 %3) "1" '("2" "3") '("4"))
(2 3) 1 4
```


## let 局部变量与闭名 ##

使用 ``let`` 结构，可以定义一组局部变量：

```clj
user=> (str (let [a 1 b 2] (+ a b)) " ok")
"3 ok"
```

闭包行为：

```clj
user=> (defn call-name [name] #(println name) )
#'user/call-name
user=> (call-name "ok")
#object[user$call_name$fn__2897 0x5c0af97a "user$call_name$fn__2897@5c0af97a"]
user=> ((call-name "ok"))
ok
```

## Java 代码调用的写法 ##

|| 场景 | Java | Clojure ||
| 构造补全 | ``new Widget("name")`` | ``(Widget. "name")`` |
| 实例方法 | ``ins.getName()`` | ``(.getName  ins)`` |
| 实例属性 | ``ins.name`` | ``(.-name ins)``  |
| 静态方法 | ``Math.sqrt(25)`` | ``(Math/sqrt 25)`` |


注意， Java 中的方法，与 Clojure 的“函数”，是不同的。



# 流程控制 #

在讲 ``if`` 这些东西之前，有一点需要事先强调的，就是，在 *Clojure* 中，没有什么语法语句的东西，所有的，都只有“表达式”，一切都是“表达式”。正因如此，对于“表达式”而言，要记得，任何时候，都关心，并搞清楚，它的 **返回值** 是什么。


## if ##

```clj
(if true "true" "false")
```

真，则返回“true”，否则返回“false”。

在 *Clojure* 中特别注意一点， *false* 的值，只有两个， **false** 和 **nil** ，其它所有值，都是 *true* ， **包括 0** 。

上面那个表达式，最后的返回值是 ``"false"`` 。

```clj
(if false "true" (println 1))
```

而这个表达式，它的返回值，就是 ``nil`` 了，虽然， ``1`` 会在标准输出上显示出来。


## do ##

``do`` 是专门为控制表达式的返回值而设计的：

```clj
(do (println 123) (println 345) true)
```

这个语句，最终会返回 ``true`` ，而过程中，它到底干了些什么无关。


## when ##

``when`` 是 ``if`` 的 ``true`` 与 ``do`` 的结合， 当为 ``false`` 时，直接返回 ``nil`` ，否则，执行接下来的一序列表达式，并返回最后一个。

```cls
(when true (println 1) (println 2) false)
```


## cond ##

按顺序测试条件，并返回第一个 ``true`` 的结果：

```clj
(def x 5)
(cond (> x 5) "1" (= x 5) "2")
```

如果没有满足的条件，则默认返回 ``nil`` ，或者，使用 ``:else`` 兜底：

```clj
(cond (< x 2) "123" (> x 5) "xx" :else "no")
```


## case ##

``case`` 是 ``cond`` 的简化形式：

```clj
(def x 5)
(case x 1 "123" 5 "xxx")
```

*else* 是最后一个表达式，不需要 ``:else`` ：

```clj
(case x 1 "123" 2 "xxx"  "other")
```


## dotimes / doseq ##

``dotimes`` 和 ``doseq`` 都是拿到作迭代操作的。

``dotimes`` 是直接迭代一个自然数序列，最后返回 ``nil``：

```clj
(dotimes [x 5] (println x))
```

``doseq`` 是遍历一个 *Collection* ，最后返回 ``nil``：

```clj
(doseq [x (range 3)] (println x))
(doseq [x '(1 2 3)] (println x))
(doseq [x #{1 2}] (println x))
(doseq [x {:new 123 :old 222}] (println x))
```

``doseq`` 也可以绑定多个变量：

```clj
user=> (doseq [x '(1 2) y '(3 4)] (println x y))
1 3
1 4
2 3
2 4
nil
```

## for ##

*Clojure* 中的 ``for`` ，作用是列表推导，不是遍历，行为有点像 ``doseq`` （ ``doseq`` 返回 ``nil`` ，而 ``for`` 返回最后一个表达式）：

```clj
user=> (for [x '(1 2) y '(3 4) z '(5 6)] [x y z])
([1 3 5] [1 3 6] [1 4 5] [1 4 6] [2 3 5] [2 3 6] [2 4 5] [2 4 6])
```



# 递归 #




# 异常处理 #

``try`` ``catch`` 的结构：

```clj
(try
  (/ 2 0)
  (catch Exception e "here")
  (finally (println "OK")))
```

当没有异常发生时，会返回 ``(/ 2 0)`` 这个位置的表达式的值，否则，会返回 ``catch`` 表达式的值。 ``finally`` 那里只是执行，与返回值无关。


抛出异常使用 ``throw`` ：

```clj
(def x
(try
  (/ 2 1)
  (throw (Exception. "xxx"))
  (catch Exception e (.getMessage e))
  (finally "OK"))
)

(println x)
```

可以看到，整个 ``try`` 表达式的返回值，就是 ``(.getMessage e)`` 的值。


*Clojure* 自己提供了一组 ``ex-info`` 和 ``ex-data`` 来处理异常：

```clj
(def x
(try
  (/ 2 1)
  (throw (ex-info "xxx" {:info "here"}))
  (catch Exception e (ex-data e))
  (finally "OK"))
)

(println (:info x))
```

``ex-info`` 打包一个 *map* ， ``ex-data`` 把这个 *map* 解出来。




