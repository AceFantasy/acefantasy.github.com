Clojure学习
邹业盛
%%mtime(%Y-%m-%d %H:%M)
%!encoding: utf-8
%!options(xhtml): --google-analytics --disqus
%!qr: http://www.zouyesheng.com/
%!format: !email
%%toc


# 准备环境 #


```bash
sudo apt-get install leiningen
```

你也可以到 https://leiningen.org/#install 下载自安装程序。

安装了 *lein* 之后，运行：

```bash
lein repl
```

第一次使用，会自动下载相关的依赖，当看到 ``user=>`` 时，这个 REPL 工具就启动好了：

```bash
user=> (println "hello world")
hello world
nil
user=> 
```

最简单的 Hello World 就是：

```clj
(println "hello world")
```

REPL 用起来还是有些不方便的，一个 clj 文件可以直接被执行当然更好，使用 ``lein-exec`` 可以使用。

``lein-exec`` 是 *lein* 的一个 plugin ，在 ``~/.lein/profiles.clj`` 中添加：

```clj
{:user {
    :plugins [[lein-exec "0.3.7"]]
}}
```

再次执行 ``lein`` 命令，会自动安装上 ``lein-exec`` ，然后假设 ``demo.clj`` 的内容是：

```clj
(println "hello world")
```

那么：

```bash
lein exec demo.clj
```

就可以看到输出了。


# 数据类型 #

**数字类：**

|| 名字 | 例子 | 解释 ||
| 长整数 | ``64`` | 64 位整数 |
| 双精度浮点 | ``5.02e23`` ``5.02`` | 64 位双精度浮点 |
| 大整数 | ``64N`` | 无限制 |
| 定点数 | ``1.0M`` | 无限制 |
| 实数 | ``22/7`` | - |


定点数的运算，不会有精度问题：

```clj
user=> (+ 0.1 0.11111111111111222222222)
0.21111111111111225
user=> (+ 0.1M 0.11111111111111222222222M)
0.21111111111111222222222M
```

实数的结果可以仍然是实数：

```clj
user=> (+ 1/3 1/3)
2/3
```


**字符类：**


|| 名字 | 例子 | 解释 ||
| 字符串 | ``"hello"`` | 只能用双引号 |
| 字符 | \e | - |


**其它类型：**

|| 名字 | 例子 | 解释 ||
| 空 | ``nil`` | - |
| 布尔 | ``true`` ``false`` | - |
| 正则表达式 | ``#"[0-9]+"`` | - |
| 关键词 | ``:alpha`` | - |
| 关键词带名字空间 | ``:release/alpha`` | - |
| 符号 | ``map`` ``+`` | *Symbol* |
| 符号带名字空间 | ``clojure.core/+`` | - |


# 数据结构 #

|| 名字 | 例子 | 解释 ||
| 列表 | ``'(1 2 3)`` | *List* |
| 向量 | ``[1 2 3]`` | - |
| 集合 | ``#{1 2 3}`` | - |
| 映射 | ``{:a 1, :b 2}`` | - |


各结构之间，可以嵌套，形成复合结构，比如：

```clj
user=> [#{1 2 3} 2 {:a 1} {:b 2} '(2 3)]
[#{1 3 2} 2 {:a 1} {:b 2} (2 3)]
```


# Clojure 的执行过程 #

传统的 java 过程是：

**文件或类源码 -> 编译 (jabac) -> JVM 字节码**


而 Clojure 的过程是：

**表达式 -> Reader -> 编译 -> JVM 字节码**


Clojure 的编译，面对的是 *Reader* 产出的 *Clojure data* 。

这里有 2 点重要的不同：

- Clojure 的输入，是以表达式为单位的。给一个文件，或者在 REPL 中按顺序输入多个表达式，并没有什么不同。
- *Reader* 独立出来，为表达式的预处理提供了一个合适的场所，即“宏”的实现。


## 求值问题 ##

前面说过的数据类型和数据结构，都是合法的表达式，在 Clojure 中，所有表达式均可求值，并且，求值的结构就是它自身，除了两个例外……

这两个例外，就是  *Symbol* 和 *List* 。

*Symbol* 的求值，结果是具体的定义：

```clj
user=> +
#object[clojure.core$_PLUS_ 0x4b8980e4 "clojure.core$_PLUS_@4b8980e4"]
```

*List* 的求值，行为就像 S 表达式一样，第一个成员作为函数，后面成员作为参数：

```clj
user=> (1 2 3)

ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  user$eval2824.invokeStatic (:1)
```

``1`` 不是函数，所以报错了。

```clj
user=> (+ 2 3)
5
```

## 延迟求值 ##

既然 *Symbol* 和 *List* 默认的处理规则并不返回自身，自然就有规则可以让它们“返回自身”，换句话说，让它们先不求值，方法就是加一个引号前缀：

```clj
user=> +
#object[clojure.core$_PLUS_ 0x4b8980e4 "clojure.core$_PLUS_@4b8980e4"]
user=> '+
+
user=> (+ 1 2)
3
user=> '(+ 1 2)
(+ 1 2)
```

理解这个机制的关键，是想清楚， *List* 本身是一个结构，如果你写了一个函数，那么 **接受求值结果** 与 **接受一个列表** 是明显不同的行为。

```clj
user=> (println (+ 1 2))
3
nil
user=> (println '(+ 1 2))
(+ 1 2)
nil
user=> (println [1 2 3])
[1 2 3]
nil
```

*Symbol* 或是一个 对象，同理：

```clj
user=> (println '+)
+
nil
user=> (println +)
#object[clojure.core$_PLUS_ 0x4b8980e4 clojure.core$_PLUS_@4b8980e4]
nil
```








